Estimates * -1, Estimates)) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1)) %>%
group_by(Parameter, Method, Stat) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE),
Median_Estimate = median(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_subtitle <- "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method. \nDotted lines represent the median parameter estimate for a given method."
ggplot(data = MCMC_graph_data %>% filter(Stat == "Posterior Mean")) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
geom_vline(aes(xintercept = Median_Estimate, color = Method),
linetype = "dotted") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("MCMC Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = MCMC_graph_subtitle) +
labs(y = "Frequency")
################################################################################
# Combined results
graph_data <- MCMC_graph_data %>%
filter(Method == "MCMC") %>%
filter(Stat == "Posterior Mean") %>%
dplyr::select(-c(Median_Estimate)) %>%
rbind(EM_graph_data) %>%
mutate(Greek_Parameter = factor(Parameter, labels = c("beta_0",
"beta_X",
"gamma_110",
"gamma_11Z",
"gamma_120",
"gamma_12Z")))
# BW plot
ggplot(data = graph_data) +
geom_histogram(aes(x = Estimates, fill = Method),
color = "black", bins = 100) +
geom_vline(aes(xintercept = Mean_Estimate, linetype = Method),
color = "black") +
geom_vline(aes(xintercept = True_Value), size = 1.2) +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_manual(values = c("white", "grey85", "grey65", "grey50", "grey35", "grey20"),
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity")) +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Thick solid lines represent true parameter values. \nAdditional lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom") +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash", "longdash", "twodash", "solid"),
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity"))
# Color plot
ggplot(data = graph_data) +
geom_histogram(aes(x = Estimates, fill = Method),
color = "black", bins = 100) +
geom_vline(aes(xintercept = Mean_Estimate, linetype = Method),
color = "black") +
geom_vline(aes(xintercept = True_Value), size = 1.2) +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_manual(values = unname(palette.colors(palette = "Okabe-Ito"))[c(2,3,4,5,7,8)],
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity")) +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Thick solid lines represent true parameter values. \nAdditional lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom") +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash", "longdash", "twodash", "solid"),
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity"))
all_results <- graph_data %>%
group_by(Method, Parameter, True_Value) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup() %>%
mutate(Bias = Mean - True_Value) %>%
mutate(rMSE = sqrt(Bias^2 + SD^2))
all_results
################################################################################
# Summary statistics
prob_df <- results_df %>%
filter(Stat %in% c("P(Y = 1)", "P(Y = 2)",
"P(Y* = 1 | Y = 1)", "P(Y* = 1)",
"P(Y* = 2 | Y = 2)", "P(Y* = 2)"))
prob_results <- prob_df %>%
group_by(Method, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
prob_results
all_results %>% filter(Method == "Obs")
################################################################################
# Set up
library(ggplot2)
library(dplyr)
library(tidyr)
library(MASS)
library(Matrix)
library(rjags)
library(turboEM)
library(SAMBA)
save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/perfect_specificity/"
load(paste0(save_directory, "ps_sim_results.RData"))
save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/"
load(paste0(save_directory, "ps_obslike_sim_results_2024-01-16.RData"))
obs_results_df <- do.call("rbind", ps_obslike_sim_results) %>%
mutate(New_Name = case_when(Parameter == "beta_0" ~ "beta[1,1]",
Parameter == "beta_1" ~ "beta[1,2]",
Parameter == "gamma_110" ~ "gamma[1,1,1]",
Parameter == "gamma_11Z" ~ "gamma[1,1,2]",
Parameter == "gamma_120" ~ "gamma[1,2,1]",
Parameter == "gamma_12Z" ~ "gamma[1,2,2]"))
obs_results_df$Parameter <- obs_results_df$New_Name
obs_results_df <- obs_results_df %>%
dplyr::select(-New_Name)
results_df <- do.call("rbind", ps_sim_results)
results_df <- rbind(results_df, obs_results_df)
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
################################################################################
# Parameter estimates - EM
EM_df <- results_df %>%
filter(Method %in% c("EM", "Perfect Sensitivity EM", "SAMBA EM", "Obs")) %>%
filter(Stat == "MLE")
EM_results <- EM_df %>%
group_by(Method, Parameter) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
EM_graph_data <- EM_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
Parameter))) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -5,
Parameter == "gamma[1,2,2]" ~ -5)) %>%
group_by(Method, Parameter) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE)) %>%
ungroup()
ggplot(data = EM_graph_data) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Spectral") +
scale_color_brewer(palette = "Spectral") +
ggtitle("EM Algorithm Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency")
################################################################################
# Parameter Estimates - MCMC
MCMC_df <- results_df %>%
filter(Method == "MCMC") %>%
filter(Stat %in% c("Posterior Mean", "Posterior Median"))
# Note label switching in naive case! (Multiply results by -1)
MCMC_results <- MCMC_df %>%
group_by(Parameter, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_data <- MCMC_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
Parameter))) %>%
mutate(Estimates = ifelse(Method == "Naive Analysis",
Estimates * -1, Estimates)) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -5,
Parameter == "gamma[1,2,2]" ~ -5)) %>%
group_by(Parameter, Method, Stat) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE),
Median_Estimate = median(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_subtitle <- "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method. \nDotted lines represent the median parameter estimate for a given method."
ggplot(data = MCMC_graph_data %>% filter(Stat == "Posterior Mean")) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
geom_vline(aes(xintercept = Median_Estimate, color = Method),
linetype = "dotted") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("MCMC Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = MCMC_graph_subtitle) +
labs(y = "Frequency")
################################################################################
# Combined results
graph_data <- MCMC_graph_data %>%
filter(Method == "MCMC") %>%
filter(Stat == "Posterior Mean") %>%
dplyr::select(-c(Median_Estimate)) %>%
rbind(EM_graph_data) %>%
mutate(Greek_Parameter = factor(Parameter, labels = c("beta_0",
"beta_X",
"gamma_110",
"gamma_11Z",
"gamma_120",
"gamma_12Z")))
# BW plot
ggplot(data = graph_data) +
geom_histogram(aes(x = Estimates, fill = Method),
color = "black", bins = 100) +
geom_vline(aes(xintercept = Mean_Estimate, linetype = Method),
color = "black") +
geom_vline(aes(xintercept = True_Value), size = 1.2) +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_manual(values = c("white", "grey85", "grey65", "grey50", "grey35", "grey20"),
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity")) +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Thick solid lines represent true parameter values. \nAdditional lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom") +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash", "longdash", "twodash", "solid"),
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity"))
# Color plot
ggplot(data = graph_data) +
geom_histogram(aes(x = Estimates, fill = Method),
color = "black", bins = 100) +
geom_vline(aes(xintercept = Mean_Estimate, linetype = Method),
color = "black") +
geom_vline(aes(xintercept = True_Value), size = 1.2) +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_manual(values = unname(palette.colors(palette = "Okabe-Ito"))[c(2,3,4,5,7,8)],
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity")) +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Thick solid lines represent true parameter values. \nAdditional lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom") +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash", "longdash", "twodash", "solid"),
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity"))
# Plot just the problematic gamma terms.
ggplot(data = graph_data %>% filter(Greek_Parameter %in% c("gamma_120", "gamma_12Z"))) +
geom_histogram(aes(x = Estimates, fill = Method),
color = "black", bins = 100) +
geom_vline(aes(xintercept = Mean_Estimate, linetype = Method),
color = "black") +
geom_vline(aes(xintercept = True_Value), size = 1.2) +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_manual(values = unname(palette.colors(palette = "Okabe-Ito"))[c(2,3,4,5,7,8)],
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity")) +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Thick solid lines represent true parameter values. \nAdditional lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom") +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash", "longdash", "twodash", "solid"),
labels = c("EM", "MCMC", "Naive Analysis", "Direct Maximization", "SAMBA-Sensitivity", "SAMBA-Specificity")) +
scale_x_continuous(limits = c(-20, 5))
all_results <- graph_data %>%
group_by(Method, Parameter, True_Value) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup() %>%
mutate(Bias = Mean - True_Value) %>%
mutate(rMSE = sqrt(Bias^2 + SD^2))
all_results
################################################################################
# Summary statistics
prob_df <- results_df %>%
filter(Stat %in% c("P(Y = 1)", "P(Y = 2)",
"P(Y* = 1 | Y = 1)", "P(Y* = 1)",
"P(Y* = 2 | Y = 2)", "P(Y* = 2)"))
prob_results <- prob_df %>%
group_by(Method, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
prob_results
all_results %>% filter(Method == "Obs")
# MI outcome example analysis for Medical Expenditure Panel Survey 2020
## https://www.meps.ahrq.gov/mepsweb/data_stats/download_data_files_detail.jsp?cboPufNumber=HC-224
library(dplyr)
#library(COMBO)
library(tidyr)
library(MASS)
library(Matrix)
data_wd <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/meps_2020/"
df <- read.csv(paste0(data_wd, "H224.csv"))
dim(df)
df_1 <- df %>%
filter(AGE20X > 18 & AGE20X < 86) %>% # Age as of 12/31/2020. Cut at 65 because that is when they qualify for medicare.
#filter(AFRDCA42 %in% c(1, 2)) %>% # Affordability of medical care (1 = need care but cannot afford, 2 = no unmet needs due to cost)
#filter(INSCOV20 != 2) %>% # Remove only public insurance coverage (usually much cheaper or free)
filter(PID == REFPRS20) %>% # Keep only the "reference person".
#filter(EMPHDX %in% c(1, 2)) %>% # Emphysema diagnosis (1 = yes, 2 = no).
filter(MIDX %in% c(1, 2)) %>% # Heart attack diagnosis (1 = yes, 2 = no).
filter(OFTSMK53 %in% c(1, 2, 3)) %>%
filter(SEX %in% c(1, 2)) %>%
filter(PHYEXE53 %in% c(1, 2)) %>%
mutate(smoke = ifelse(OFTSMK53 == 3, 0, 1)) %>% # Code so 1 is smoker, 0 is nonsmoker (ref)
mutate(not_insured = ifelse(INSCOV20 == 1, 0, 1)) %>% # Code so 1 is uninsured, 0 is insured (ref)
mutate(female = ifelse(SEX == 1, 0, 1)) %>% # Coded so 0 = male, 1 = female.
mutate(age_c = AGE20X - mean(AGE20X)) %>%
mutate(no_exercise = ifelse(PHYEXE53 == 1, 0, 1)) # Coded so 0 = 5+ days exercise, 1 = not 5+ day exercise
save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/meps_2020/"
################################################################################
# Observed data log-likelihood method
function_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/small_n_v3/functions/"
source_files <- list.files(function_directory, pattern = "*.R")
for (i in 1:length(source_files)) {
source(paste0(function_directory, source_files[i]))
}
obs_loglik <- function(parameters, X, Z, ystar_01, sample_size, n_cat = 2){
beta <- parameters[1:4]
gamma_v <- parameters[5:10]
gamma_mat <- matrix(gamma_v, ncol = 2, byrow = FALSE)
pi_terms <- pi_compute(beta, X, sample_size, n_cat)
pistar_terms <- pistar_compute(gamma_mat, Z, sample_size, n_cat)
j1k1_terms <- pistar_terms[1:sample_size, 1] * pi_terms[,1]
j2k1_terms <- pistar_terms[1:sample_size, 2] * pi_terms[,2]
k1_log_terms <- ystar_01 * log(j1k1_terms + j2k1_terms)
j1k2_terms <- pistar_terms[(sample_size + 1):(2 * sample_size), 1] * pi_terms[,1]
j2k2_terms <- pistar_terms[(sample_size + 1):(2 * sample_size), 2] * pi_terms[,2]
k2_log_terms <- (1 - ystar_01) * log(j1k2_terms + j2k2_terms)
obs_loglik_result <- -1*sum(k1_log_terms + k2_log_terms)
return(obs_loglik_result)
}
################################################################################
Ystar <- df_1$MIDX
Ystar_01 <- ifelse(Ystar == 2, 0, 1)
z1 <- df_1$female
z2 <- df_1$age_c
x1 <- df_1$smoke
x2 <- df_1$no_exercise
n <- length(Ystar)
n_cat <- 2
x_matrix <- matrix(c(x1, x2, z2), ncol = 3, byrow = FALSE)
z_matrix <- matrix(c(z1, z2), ncol = 2)
X = matrix(c(rep(1, n), c(x_matrix)),
byrow = FALSE, nrow = n)
Z = matrix(c(rep(1, n), c(z_matrix)),
byrow = FALSE, nrow = n)
obs_Y_reps = matrix(rep(Ystar, n_cat), nrow = n, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = n), nrow = n,
byrow = FALSE)
obs_Y_matrix = 1 * (obs_Y_reps == category_matrix)
log_reg <- glm(Ystar_01 ~ x1 + x2 + z2, family = "binomial")
beta_start <- matrix(unname(coefficients(log_reg)), ncol = 1)
log_reg_z <- glm(Ystar_01 ~ x1 + x2 + z1 + z2, family = "binomial")
gamma_start <- matrix(c(2, 0, 0, -2, 0, 0), ncol = 2, byrow = FALSE)
gamma_start <- matrix(c(2, 0, 0, -2, 0, 0), ncol = 2, byrow = FALSE)
# Check sens and spec at starting values.
pistar_gammastart8 <- pistar_compute(gamma_start, Z, nrow(X), 2)
pistar11_8 <- mean(pistar_gammastart8[1:nrow(X), 1])
pistar22_8 <- mean(pistar_gammastart[(nrow(X) + 1):(2 * nrow(X)), 2])
X = matrix(c(rep(1, n), c(x_matrix)),
byrow = FALSE, nrow = n)
function_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/small_n_v3/functions/"
source_files <- list.files(function_directory, pattern = "*.R")
for (i in 1:length(source_files)) {
source(paste0(function_directory, source_files[i]))
}
obs_loglik <- function(parameters, X, Z, ystar_01, sample_size, n_cat = 2){
beta <- parameters[1:4]
gamma_v <- parameters[5:10]
gamma_mat <- matrix(gamma_v, ncol = 2, byrow = FALSE)
pi_terms <- pi_compute(beta, X, sample_size, n_cat)
pistar_terms <- pistar_compute(gamma_mat, Z, sample_size, n_cat)
j1k1_terms <- pistar_terms[1:sample_size, 1] * pi_terms[,1]
j2k1_terms <- pistar_terms[1:sample_size, 2] * pi_terms[,2]
k1_log_terms <- ystar_01 * log(j1k1_terms + j2k1_terms)
j1k2_terms <- pistar_terms[(sample_size + 1):(2 * sample_size), 1] * pi_terms[,1]
j2k2_terms <- pistar_terms[(sample_size + 1):(2 * sample_size), 2] * pi_terms[,2]
k2_log_terms <- (1 - ystar_01) * log(j1k2_terms + j2k2_terms)
obs_loglik_result <- -1*sum(k1_log_terms + k2_log_terms)
return(obs_loglik_result)
}
################################################################################
Ystar <- df_1$MIDX
Ystar_01 <- ifelse(Ystar == 2, 0, 1)
z1 <- df_1$female
z2 <- df_1$age_c
x1 <- df_1$smoke
x2 <- df_1$no_exercise
n <- length(Ystar)
n_cat <- 2
x_matrix <- matrix(c(x1, x2, z2), ncol = 3, byrow = FALSE)
z_matrix <- matrix(c(z1, z2), ncol = 2)
X = matrix(c(rep(1, n), c(x_matrix)),
byrow = FALSE, nrow = n)
Z = matrix(c(rep(1, n), c(z_matrix)),
byrow = FALSE, nrow = n)
obs_Y_reps = matrix(rep(Ystar, n_cat), nrow = n, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = n), nrow = n,
byrow = FALSE)
obs_Y_matrix = 1 * (obs_Y_reps == category_matrix)
log_reg <- glm(Ystar_01 ~ x1 + x2 + z2, family = "binomial")
beta_start <- matrix(unname(coefficients(log_reg)), ncol = 1)
log_reg_z <- glm(Ystar_01 ~ x1 + x2 + z1 + z2, family = "binomial")
gamma_start <- matrix(c(1, 0, 0, -2, 0, 0), ncol = 2, byrow = FALSE)
gamma_start <- matrix(c(2, 0, 0, -2, 0, 0), ncol = 2, byrow = FALSE)
# Check sens and spec at starting values.
pistar_gammastart8 <- pistar_compute(gamma_start, Z, nrow(X), 2)
pistar11_8 <- mean(pistar_gammastart8[1:nrow(X), 1])
pistar22_8 <- mean(pistar_gammastart8[(nrow(X) + 1):(2 * nrow(X)), 2])
obs_results8 <- optim(par = c(c(beta_start), c(gamma_start)),
fn = obs_loglik, X = X, Z = Z,
ystar_01 = obs_Y_matrix[,1],
sample_size = nrow(X), n_cat = 2,
control = list(maxit = 5000), method = "BFGS")
obs_results8
gamma_start <- matrix(c(1, 0, 0, -2, 0, 0), ncol = 2, byrow = FALSE)
obs_results8 <- optim(par = c(c(beta_start), c(gamma_start)),
fn = obs_loglik, X = X, Z = Z,
ystar_01 = obs_Y_matrix[,1],
sample_size = nrow(X), n_cat = 2,
control = list(maxit = 5000), method = "BFGS")
gamma_start <- matrix(c(1, 0, 0, -2, 0, 0), ncol = 2, byrow = FALSE)
obs_results_analysis <- optim(par = c(c(beta_start), c(gamma_start)),
fn = obs_loglik, X = X, Z = Z,
ystar_01 = obs_Y_matrix[,1],
sample_size = nrow(X), n_cat = 2,
control = list(maxit = 5000), method = "BFGS")
# Check for label switching.
gamma_estimates <- matrix(obs_results_analysis$par[5:10], ncol = 2, byrow = FALSE)
pistar_estimates <- pistar_compute(gamma_estimates, Z, n = nrow(X), n_cat = 2)
mean_pistar11 <- mean(pistar_estimates[1:nrow(X), 1])
mean_pistar22 <- mean(pistar_estimates[(nrow(X) + 1):(2 * nrow(X)), 2])
mean_pistar11
mean_pistar22
flip_pistar11 <- 1 - mean_pistar22
flip_pistar22 <- 1 - mean_pistar11
flip_pistar11
flip_pistar22
J <- mean_pistar11 + mean_pistar22 - 1
J_flip <- flip_pistar11 + flip_pistar22 - 1
J
J_flip
obs_results_analysis
?optim
obs_results_analysis <- optim(par = c(c(beta_start), c(gamma_start)),
fn = obs_loglik, X = X, Z = Z,
ystar_01 = obs_Y_matrix[,1],
sample_size = nrow(X), n_cat = 2,
control = list(maxit = 5000), method = "BFGS",
hessian = TRUE)
obs_results_analysis
sqrt(diag(solve(-obs_results_analysis$hessian)))
sqrt(diag(solve(obs_results_analysis$hessian)))
obs_results_analysis$par
# Is this correct to get SEs???
sqrt(diag(solve(-obs_results_analysis$hessian)))
obs_loglik_positive <- function(parameters, X, Z, ystar_01, sample_size, n_cat = 2){
beta <- parameters[1:4]
gamma_v <- parameters[5:10]
gamma_mat <- matrix(gamma_v, ncol = 2, byrow = FALSE)
pi_terms <- pi_compute(beta, X, sample_size, n_cat)
pistar_terms <- pistar_compute(gamma_mat, Z, sample_size, n_cat)
j1k1_terms <- pistar_terms[1:sample_size, 1] * pi_terms[,1]
j2k1_terms <- pistar_terms[1:sample_size, 2] * pi_terms[,2]
k1_log_terms <- ystar_01 * log(j1k1_terms + j2k1_terms)
j1k2_terms <- pistar_terms[(sample_size + 1):(2 * sample_size), 1] * pi_terms[,1]
j2k2_terms <- pistar_terms[(sample_size + 1):(2 * sample_size), 2] * pi_terms[,2]
k2_log_terms <- (1 - ystar_01) * log(j1k2_terms + j2k2_terms)
obs_loglik_result <- -1*sum(k1_log_terms + k2_log_terms)
return(obs_loglik_result)
}
obs_loglik_result <- sum(k1_log_terms + k2_log_terms)
obs_loglik_positive <- function(parameters, X, Z, ystar_01, sample_size, n_cat = 2){
beta <- parameters[1:4]
gamma_v <- parameters[5:10]
gamma_mat <- matrix(gamma_v, ncol = 2, byrow = FALSE)
pi_terms <- pi_compute(beta, X, sample_size, n_cat)
pistar_terms <- pistar_compute(gamma_mat, Z, sample_size, n_cat)
j1k1_terms <- pistar_terms[1:sample_size, 1] * pi_terms[,1]
j2k1_terms <- pistar_terms[1:sample_size, 2] * pi_terms[,2]
k1_log_terms <- ystar_01 * log(j1k1_terms + j2k1_terms)
j1k2_terms <- pistar_terms[(sample_size + 1):(2 * sample_size), 1] * pi_terms[,1]
j2k2_terms <- pistar_terms[(sample_size + 1):(2 * sample_size), 2] * pi_terms[,2]
k2_log_terms <- (1 - ystar_01) * log(j1k2_terms + j2k2_terms)
obs_loglik_result <- sum(k1_log_terms + k2_log_terms)
return(obs_loglik_result)
}
obs_results_analysis_max <- optim(par = c(c(beta_start), c(gamma_start)),
fn = obs_loglik_positive, X = X, Z = Z,
ystar_01 = obs_Y_matrix[,1],
sample_size = nrow(X), n_cat = 2,
control = list(maxit = 5000, fnscale = -1),
method = "BFGS",
hessian = TRUE)
obs_results_analysis_max
# Is this correct to get SEs???
sqrt(diag(solve(-obs_results_analysis_max$hessian)))
sqrt(diag(solve(obs_results_analysis_max$hessian)))
# Get SEs
sqrt(diag(solve(obs_results_analysis$hessian)))
