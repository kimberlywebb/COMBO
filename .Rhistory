library(doParallel)
# Multinomial model (J = 3 cateogries).
# Coding based on `obsloglikEM` function from the SAMBA R package (Beesley, 2020).
################################################################################
library(MASS)
library(Matrix)
library(turboEM)
library(dplyr)
library(doParallel)
my_wd <- "C:/Users/hochsted/Dropbox/Misclassification/Code/EM_Multinom_Misclass/2021-12_Fix_Estep/Accelerate_EM/J3_single_run/"
source(paste0(my_wd, "functions.R"))
source(paste0(my_wd, "turboEM_functions.R"))
################################################################################
# Data generation settings.
sample_size <- 10000
n_cat <- 3
x_mu <- 0
z_mu <- 3
x_sigma <- 1
z_sigma <- 1
mvr_norm_cor1 <- .5
mvr_norm_cor2 <- .5
true_beta <- matrix(c(-.4, .3, -.8, 3), ncol = 1)
# Columns are true category j.
# Rows are k1p1, k1p2, k2p1, k2p2.
true_gamma <- matrix(c(.8, .5, -.6, .54,
1.3, -.2, -.3, .75,
-.7, -.4, -1.8, .2),
ncol = n_cat, byrow = FALSE)
param_current <- c(c(true_beta), c(true_gamma))
em_function_j3 <- function(param_current,
obs_Y_matrix, obs_Y, x_matrix, z_matrix,
sample_size, n_cat){
response_factor = factor(obs_Y, levels = c(3, 1, 2))
beta_current = matrix(param_current[1:ncol(X)], ncol = 1)
gamma_current = matrix(c(param_current)[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))],
ncol = n_cat, byrow = FALSE)
probabilities_1 = pi_compute(beta_current, X, sample_size, n_cat)
probabilities_2 <- 1 - sum_every_n(probabilities_1, sample_size)
probabilities <- c(probabilities_1, probabilities_2)
conditional_probabilities = pistar_compute(gamma_current, Z, sample_size, n_cat)
weights = w_j(ystar_matrix = obs_Y_matrix,
pistar_matrix = conditional_probabilities,
pi_matrix = probabilities,
sample_size = sample_size, n_cat = n_cat)
fit.gamma1 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,1])
gamma1_new <- c(coefficients(fit.gamma1))
fit.gamma2 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,2])
gamma2_new <- c(coefficients(fit.gamma2))
fit.gamma3 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,3])
gamma3_new <- c(coefficients(fit.gamma3))
gamma_new <- matrix(c(gamma1_new, gamma2_new, gamma3_new),
ncol = 3, byrow = FALSE)
fit.beta <- nnet::multinom(weights ~ . + 0, as.data.frame(x_matrix))
beta_new <- matrix(c(coefficients(fit.beta)), ncol = 1)
param_new = c(c(beta_new), gamma1_new, gamma2_new, gamma3_new)
param_current = param_new
return(param_new)
}
my_data <- generate_multinom_misclass(sample_size = sample_size,
x_mu = x_mu,
x_sigma = x_sigma,
z_mu = z_mu,
z_sigma = z_sigma,
mvr_norm_cor1 = mvr_norm_cor1,
mvr_norm_cor2 = mvr_norm_cor2,
beta = true_beta,
gamma = true_gamma,
n_cat = n_cat)
true_Y <- my_data[["true_Y"]]
obs_Y <- my_data[["obs_Y"]]
obs_Y_matrix <- my_data[["obs_Y_matrix"]]
x_matrix <- my_data[["x_matrix"]]
z_matrix <- my_data[["z_matrix"]]
X <- my_data[["X"]]
Z <- my_data[["Z"]]
results_i <- turboem(par = rep(1, 16),
fixptfn = em_function_j3, #objfn = loglik,
method = c("squarem"),
obs_Y_matrix = obs_Y_matrix,
obs_Y = obs_Y,
X = X, Z = Z,
sample_size = sample_size,
n_cat = n_cat)
results_i
results_i <- turboem(par = rep(1, 16),
fixptfn = em_function_j3, #objfn = loglik,
method = c("em"),
obs_Y_matrix = obs_Y_matrix,
obs_Y = obs_Y,
X = X, Z = Z,
sample_size = sample_size,
n_cat = n_cat)
results_i
em_function_j3 <- function(param_current,
obs_Y_matrix, obs_Y, X, Z,
x_matrix, z_matrix,
sample_size, n_cat){
response_factor = factor(obs_Y, levels = c(3, 1, 2))
beta_current = matrix(param_current[1:ncol(X)], ncol = 1)
gamma_current = matrix(c(param_current)[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))],
ncol = n_cat, byrow = FALSE)
probabilities_1 = pi_compute(beta_current, X, sample_size, n_cat)
probabilities_2 <- 1 - sum_every_n(probabilities_1, sample_size)
probabilities <- c(probabilities_1, probabilities_2)
conditional_probabilities = pistar_compute(gamma_current, Z, sample_size, n_cat)
weights = w_j(ystar_matrix = obs_Y_matrix,
pistar_matrix = conditional_probabilities,
pi_matrix = probabilities,
sample_size = sample_size, n_cat = n_cat)
fit.gamma1 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,1])
gamma1_new <- c(coefficients(fit.gamma1))
fit.gamma2 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,2])
gamma2_new <- c(coefficients(fit.gamma2))
fit.gamma3 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,3])
gamma3_new <- c(coefficients(fit.gamma3))
gamma_new <- matrix(c(gamma1_new, gamma2_new, gamma3_new),
ncol = 3, byrow = FALSE)
fit.beta <- nnet::multinom(weights ~ . + 0, as.data.frame(x_matrix))
beta_new <- matrix(c(coefficients(fit.beta)), ncol = 1)
param_new = c(c(beta_new), gamma1_new, gamma2_new, gamma3_new)
param_current = param_new
return(param_new)
}
results_i <- turboem(par = rep(1, 16),
fixptfn = em_function_j3, #objfn = loglik,
method = c("em"),
obs_Y_matrix = obs_Y_matrix,
obs_Y = obs_Y,
X = X, Z = Z,
x_matrix = x_matrix,
z_matrix = z_matrix,
sample_size = sample_size,
n_cat = n_cat)
results_i
em_function_j3 <- function(param_current,
obs_Y_matrix, obs_Y, X, Z,
x_matrix, z_matrix,
sample_size, n_cat){
response_factor = factor(obs_Y, levels = c(3, 1, 2))
beta_current = matrix(param_current[1:ncol(X)], ncol = 1)
gamma_current = matrix(c(param_current)[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))],
ncol = n_cat, byrow = FALSE)
probabilities_1 = pi_compute(beta_current, X, sample_size, n_cat)
probabilities_2 <- 1 - sum_every_n(probabilities_1, sample_size)
probabilities <- c(probabilities_1, probabilities_2)
conditional_probabilities = pistar_compute(gamma_current, Z, sample_size, n_cat)
weights = w_j(ystar_matrix = obs_Y_matrix,
pistar_matrix = conditional_probabilities,
pi_vector = probabilities,
sample_size = sample_size, n_cat = n_cat)
fit.gamma1 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,1])
gamma1_new <- c(coefficients(fit.gamma1))
fit.gamma2 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,2])
gamma2_new <- c(coefficients(fit.gamma2))
fit.gamma3 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,3])
gamma3_new <- c(coefficients(fit.gamma3))
gamma_new <- matrix(c(gamma1_new, gamma2_new, gamma3_new),
ncol = 3, byrow = FALSE)
fit.beta <- nnet::multinom(weights ~ . + 0, as.data.frame(x_matrix))
beta_new <- matrix(c(coefficients(fit.beta)), ncol = 1)
param_new = c(c(beta_new), gamma1_new, gamma2_new, gamma3_new)
param_current = param_new
return(param_new)
}
results_i <- turboem(par = rep(1, 16),
fixptfn = em_function_j3, #objfn = loglik,
method = c("em"),
obs_Y_matrix = obs_Y_matrix,
obs_Y = obs_Y,
X = X, Z = Z,
x_matrix = x_matrix,
z_matrix = z_matrix,
sample_size = sample_size,
n_cat = n_cat)
# First column will be the reference. Adjust the reference category here!
weights_factor <- matrix(c(weights[,3], weights[,1], weights[,2]),
ncol = 3, byrow = FALSE)
weights <- w_j(obs_Y_matrix, pistar_matrix, pi_vector, sample_size, 3)
pi_values <- pi_compute(start_beta, Z, sample_size, n_cat)
last_pi_values <- 1 - sum_every_n(pi_values, sample_size)
function (x, f, drop = FALSE, ...)
my_data <- generate_multinom_misclass(sample_size = sample_size,
x_mu = x_mu, x_sigma = x_sigma,
z_mu = z_mu, z_sigma = z_sigma,
mvr_norm_cor1 = mvr_norm_cor1,
mvr_norm_cor2 = mvr_norm_cor2,
beta = true_beta, gamma = true_gamma,
n_cat = n_cat)
true_Y <- my_data[["true_Y"]]
obs_Y <- my_data[["obs_Y"]]
obs_Y_matrix <- my_data[["obs_Y_matrix"]]
my_data <- generate_multinom_misclass(sample_size = sample_size,
x_mu = x_mu, x_sigma = x_sigma,
z_mu = z_mu, z_sigma = z_sigma,
mvr_norm_cor1 = mvr_norm_cor1,
mvr_norm_cor2 = mvr_norm_cor2,
beta = true_beta, gamma = true_gamma,
n_cat = n_cat)
true_Y <- my_data[["true_Y"]]
obs_Y <- my_data[["obs_Y"]]
obs_Y_matrix <- my_data[["obs_Y_matrix"]]
x_matrix <- my_data[["x_matrix"]]
z_matrix <- my_data[["z_matrix"]]
X <- my_data[["X"]]
Z <- my_data[["Z"]]
response_factor <- factor(obs_Y, levels = c(3, 1, 2))
start_gamma <- true_gamma + matrix(rnorm(12), ncol = 3)
start_beta <- true_beta + matrix(rnorm(4), ncol = 1)
pi_values <- pi_compute(start_beta, Z, sample_size, n_cat)
last_pi_values <- 1 - sum_every_n(pi_values, sample_size)
pi_vector <- c(pi_values, last_pi_values)
pistar_matrix <- pistar_compute(start_gamma, Z, sample_size, n_cat)
weights <- w_j(obs_Y_matrix, pistar_matrix, pi_vector, sample_size, 3)
fit.gamma1 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,1])
gamma1_new <- c(coefficients(fit.gamma1))
fit.gamma2 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,2])
gamma2_new <- c(coefficients(fit.gamma2))
fit.gamma3 <- nnet::multinom(response_factor ~ . + 0,
as.data.frame(z_matrix),
weights = weights[,3])
gamma3_new <- c(coefficients(fit.gamma3))
gamma_new <- matrix(c(gamma1_new, gamma2_new, gamma3_new),
ncol = 3, byrow = FALSE)
# First column will be the reference. Adjust the reference category here!
weights_factor <- matrix(c(weights[,3], weights[,1], weights[,2]),
ncol = 3, byrow = FALSE)
fit.beta <- nnet::multinom(weights_factor ~ . + 0, as.data.frame(x_matrix))
beta_new <- matrix(c(coefficients(fit.beta)), ncol = 1)
beta_new
my_data <- generate_multinom_misclass(sample_size = sample_size,
x_mu = x_mu,
x_sigma = x_sigma,
z_mu = z_mu,
z_sigma = z_sigma,
mvr_norm_cor1 = mvr_norm_cor1,
mvr_norm_cor2 = mvr_norm_cor2,
beta = true_beta,
gamma = true_gamma,
n_cat = n_cat)
true_Y <- my_data[["true_Y"]]
obs_Y <- my_data[["obs_Y"]]
obs_Y_matrix <- my_data[["obs_Y_matrix"]]
x_matrix <- my_data[["x_matrix"]]
z_matrix <- my_data[["z_matrix"]]
X <- my_data[["X"]]
Z <- my_data[["Z"]]
results_i <- turboem(par = rep(1, 16),
fixptfn = em_function_j3, #objfn = loglik,
method = c("em"),
obs_Y_matrix = obs_Y_matrix,
obs_Y = obs_Y,
X = X, Z = Z,
x_matrix = x_matrix,
z_matrix = z_matrix,
sample_size = sample_size,
n_cat = n_cat)
results_i <- turboem(par = rep(1, 16),
fixptfn = em_function_j3, #objfn = loglik,
method = c("squarem"),
obs_Y_matrix = obs_Y_matrix,
obs_Y = obs_Y,
X = X, Z = Z,
x_matrix = x_matrix,
z_matrix = z_matrix,
sample_size = sample_size,
n_cat = n_cat)
control_settings = list(convtype = "parameter", tol = 0.0004,
stoptype = "maxiter", maxiter = 200)
results_i <- turboem(par = rep(1, 16),
fixptfn = em_function_j3, #objfn = loglik,
method = c("squarem"),
obs_Y_matrix = obs_Y_matrix,
obs_Y = obs_Y,
X = X, Z = Z,
x_matrix = x_matrix,
z_matrix = z_matrix,
sample_size = sample_size,
n_cat = n_cat
control.run = control_settings)
control_settings = list(convtype = "parameter", tol = 0.0004,
stoptype = "maxiter", maxiter = 200)
results_i <- turboem(par = rep(1, 16),
fixptfn = em_function_j3, #objfn = loglik,
method = c("squarem"),
obs_Y_matrix = obs_Y_matrix,
obs_Y = obs_Y,
X = X, Z = Z,
x_matrix = x_matrix,
z_matrix = z_matrix,
sample_size = sample_size,
n_cat = n_cat,
control.run = control_settings)
results_i
pars(results_i)
estimates <- data.frame(Estimates = c(pars(results_i)),
Sim_ID = rep(i, 16),
Parameter = c("beta1", "beta2",
"beta3", "beta4",
"gamma11", "gamma21",
"gamma31", "gamma41",
"gamma12", "gamma22",
"gamma32", "gamma42",
"gamma13", "gamma23",
"gamma33", "gamma43"),
Convergence = c(rep(results_i$convergence, 16)))
i = 1
estimates <- data.frame(Estimates = c(pars(results_i)),
Sim_ID = rep(i, 16),
Parameter = c("beta1", "beta2",
"beta3", "beta4",
"gamma11", "gamma21",
"gamma31", "gamma41",
"gamma12", "gamma22",
"gamma32", "gamma42",
"gamma13", "gamma23",
"gamma33", "gamma43"),
Convergence = c(rep(results_i$convergence, 16)))
test_results <- estimates
save(estimates, file = paste0(my_wd, "J3_setup_test_results.RData"))
par1_loglike <- loglik(test_results$Estimates, my_data[["obs_Y_matrix"]],
my_data[["X"]], my_data[["Z"]],
sample_size, n_cat) * -1
par2 <- test_results$Estimates[c(3, 4, 1, 2, 9:12, 5:8, 13:16)]
par2_loglike <- loglik(par2, my_data[["obs_Y_matrix"]],
my_data[["X"]], my_data[["Z"]],
sample_size, n_cat) * -1
beta5 <- test_results$Estimates[1] - test_results$Estimates[3]
beta6 <- test_results$Estimates[2] - test_results$Estimates[4]
par3 <- c(beta5, beta6, -test_results$Estimates[3], -test_results$Estimates[4],
test_results$Estimates[c(5:8, 13:16, 9:12)])
par3_loglike <- loglik(par3, my_data[["obs_Y_matrix"]],
my_data[["X"]], my_data[["Z"]],
sample_size, n_cat) * -1
par4 <- c(-test_results$Estimates[3], -test_results$Estimates[4], beta5, beta6,
test_results$Estimates[c(13:16, 5:8, 9:12)])
par4_loglike <- loglik(par4, my_data[["obs_Y_matrix"]],
my_data[["X"]], my_data[["Z"]],
sample_size, n_cat) * -1
par5 <- c(-beta5, -beta6, -test_results$Estimates[1], -test_results$Estimates[2],
test_results$Estimates[c(9:12, 13:16, 5:8)])
par5_loglike <- loglik(par5, my_data[["obs_Y_matrix"]],
my_data[["X"]], my_data[["Z"]],
sample_size, n_cat) * -1
par6 <- c(-test_results$Estimates[1], -test_results$Estimates[2], -beta5, -beta6,
test_results$Estimates[c(13:16, 9:12, 5:8)])
par6_loglike <- loglik(par6, my_data[["obs_Y_matrix"]],
my_data[["X"]], my_data[["Z"]],
sample_size, n_cat) * -1
par1_loglike
par2_loglike
par3_loglike
par4_loglike
par5_loglike
par6_loglike
par1_pi <- pi_compute(test_results$Estimates[1:4], my_data[["X"]], sample_size, n_cat)
par1_pi_matrix <- matrix(c(par1_pi, 1 - sum_every_n(par1_pi, n = sample_size)),
ncol = n_cat, byrow = FALSE)
par1_pistar <- pistar_compute(matrix(test_results$Estimates[5:16],
ncol = n_cat, byrow = FALSE),
my_data[["Z"]], sample_size, n_cat)
par1_pistar_df <- data.frame(pistar = c(par1_pistar[,1], par1_pistar[,2], par1_pistar[,3]),
j = rep(1:n_cat, each = sample_size * n_cat),
k = rep(c(1:n_cat, 1:n_cat, 1:n_cat), each = sample_size),
par_set = 1)
par1_pistar_df %>% dplyr::group_by(j,k) %>% summarise(mean_pistar = mean(pistar)) %>% ungroup()
par2_pi <- pi_compute(par2[1:4], my_data[["X"]], sample_size, n_cat)
par2_pi_matrix <- matrix(c(par2_pi, 1 - sum_every_n(par2_pi, n = sample_size)),
ncol = n_cat, byrow = FALSE)
par2_pistar <- pistar_compute(matrix(par2[5:16], ncol = n_cat, byrow = FALSE),
my_data[["Z"]], sample_size, n_cat)
par2_pistar_df <- data.frame(pistar = c(par2_pistar[,1], par2_pistar[,2], par2_pistar[,3]),
j = rep(1:n_cat, each = sample_size * n_cat),
k = rep(c(1:n_cat, 1:n_cat, 1:n_cat), each = sample_size),
par_set = 2)
par2_pistar_df %>% dplyr::group_by(j,k) %>% summarise(mean_pistar = mean(pistar)) %>% ungroup()
par3_pi <- pi_compute(par3[1:4], my_data[["X"]], sample_size, n_cat)
par3_pi_matrix <- matrix(c(par3_pi, 1 - sum_every_n(par3_pi, n = sample_size)),
ncol = n_cat, byrow = FALSE)
par3_pistar <- pistar_compute(matrix(par3[5:16], ncol = n_cat, byrow = FALSE),
my_data[["Z"]], sample_size, n_cat)
par3_pistar_df <- data.frame(pistar = c(par3_pistar[,1], par3_pistar[,2], par3_pistar[,3]),
j = rep(1:n_cat, each = sample_size * n_cat),
k = rep(c(1:n_cat, 1:n_cat, 1:n_cat), each = sample_size),
par_set = 3)
par3_pistar_df %>% dplyr::group_by(j,k) %>% summarise(mean_pistar = mean(pistar)) %>% ungroup()
par4_pi <- pi_compute(par4[1:4], my_data[["X"]], sample_size, n_cat)
par4_pi_matrix <- matrix(c(par4_pi, 1 - sum_every_n(par4_pi, n = sample_size)),
ncol = n_cat, byrow = FALSE)
par4_pistar <- pistar_compute(matrix(par4[5:16], ncol = n_cat, byrow = FALSE),
my_data[["Z"]], sample_size, n_cat)
par4_pistar_df <- data.frame(pistar = c(par4_pistar[,1], par4_pistar[,2], par4_pistar[,3]),
j = rep(1:n_cat, each = sample_size * n_cat),
k = rep(c(1:n_cat, 1:n_cat, 1:n_cat), each = sample_size),
par_set = 4)
par4_pistar_df %>% dplyr::group_by(j,k) %>% summarise(mean_pistar = mean(pistar)) %>% ungroup()
par5_pi <- pi_compute(par5[1:4], my_data[["X"]], sample_size, n_cat)
par5_pi_matrix <- matrix(c(par5_pi, 1 - sum_every_n(par5_pi, n = sample_size)),
ncol = n_cat, byrow = FALSE)
par5_pistar <- pistar_compute(matrix(par5[5:16], ncol = n_cat, byrow = FALSE),
my_data[["Z"]], sample_size, n_cat)
par5_pistar_df <- data.frame(pistar = c(par5_pistar[,1], par5_pistar[,2], par5_pistar[,3]),
j = rep(1:n_cat, each = sample_size * n_cat),
k = rep(c(1:n_cat, 1:n_cat, 1:n_cat), each = sample_size),
par_set = 5)
par5_pistar_df %>% dplyr::group_by(j,k) %>% summarise(mean_pistar = mean(pistar)) %>% ungroup()
par6_pi <- pi_compute(par6[1:4], my_data[["X"]], sample_size, n_cat)
par6_pi_matrix <- matrix(c(par6_pi, 1 - sum_every_n(par6_pi, n = sample_size)),
ncol = n_cat, byrow = FALSE)
par6_pistar <- pistar_compute(matrix(par6[5:16], ncol = n_cat, byrow = FALSE),
my_data[["Z"]], sample_size, n_cat)
par6_pistar_df <- data.frame(pistar = c(par6_pistar[,1], par6_pistar[,2], par6_pistar[,3]),
j = rep(1:n_cat, each = sample_size * n_cat),
k = rep(c(1:n_cat, 1:n_cat, 1:n_cat), each = sample_size),
par_set = 6)
par6_pistar_df %>% dplyr::group_by(j,k) %>% summarise(mean_pistar = mean(pistar)) %>% ungroup()
pi_df <- data.frame(pi_term = c(c(par1_pi_matrix),
c(par2_pi_matrix),
c(par3_pi_matrix),
c(par4_pi_matrix),
c(par5_pi_matrix),
c(par6_pi_matrix)),
j = rep(rep(1:n_cat, each = sample_size), 6),
par_set = rep(1:6), each = sample_size*n_cat)
pi_summary <- pi_df %>% group_by(par_set, j) %>% summarise(mean_pi = mean(pi_term)) %>% ungroup()
pi_summary <- data.frame(mean_pi = c(colMeans(par1_pi_matrix),
colMeans(par2_pi_matrix),
colMeans(par3_pi_matrix),
colMeans(par4_pi_matrix),
colMeans(par5_pi_matrix),
colMeans(par6_pi_matrix)),
j = rep(1:n_cat, 6),
par_set = rep(1:6, each = n_cat))
pistar_df <- bind_rows(par1_pistar_df, par2_pistar_df, par3_pistar_df,
par4_pistar_df, par5_pistar_df, par6_pistar_df)
pistar_summary <- pistar_df %>% group_by(par_set, j, k) %>% summarise(mean_pistar = mean(pistar)) %>% ungroup()
View(pistar_summary)
pistar_summary
pistar_summary[1:54,]
print(pistar_summary, n = 54)
pistar_selection <- pistar_summary %>%
mutate(jk = paste0(j, k)) %>%
filter(jk %in% c(11, 22, 33)) %>%
group_by(par_set) %>%
summarise(above_50 = length(which(mean_pistar > .50)),
average = mean(mean_pistar)) %>%
ungroup()
pistar_selection
par5
par5_beta <- matrix(par5[1:4], ncol = 1)
par5_gamma <- matrix(par5[5:16], ncol = 3, byrow = FALSE)
par5_beta
true_beta
par5_gamma
true_gamma
table(obs_Y, true_Y)
prop.table(table(obs_Y, true_Y), 2)
?array
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
