function_wd <- "C:/Users/hochsted/Dropbox/Misclassification/Code/RPackages/GitHub/COMBO/R/"
source_files <- list.files(function_wd, pattern = "*.R")
for (i in 1:length(source_files)) {
source(paste0(function_wd, source_files[i]))
}
my_data <- COMBO_data_2stage(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape, v_shape = v_shape,
beta = true_beta, gamma = true_gamma, delta = true_delta)
table(my_data[["obs_Ytilde"]], my_data[["obs_Ystar"]], my_data[["true_Y"]])
beta_start <- rep(1, length = length(c(true_beta)))
gamma_start <- rep(1, length = length(c(true_gamma)))
delta_start <- rep(1, length = length(c(true_delta)))
EM_results <- COMBO_EM_2stage(Ystar = my_data[["obs_Ystar"]],
Ytilde = my_data[["obs_Ytilde"]],
x_matrix = my_data[["x"]],
z_matrix = my_data[["z"]],
v_matrix = my_data[["v"]],
beta_start = beta_start,
gamma_start = gamma_start,
delta_start = delta_start)
obs_Ystar_matrix = my_data[["obs_Ystar_matrix"]]
obs_Ytilde_matrix = my_data[["obs_Ytilde_matrix"]]
X = my_data[["x_design_matrix"]]
Z = my_data[["z_design_matrix"]]
V = my_data[["v_design_matrix"]]
starting_values <- rnorm(14)
new_parameters <- em_function(starting_values,
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = n, n_cat = 2)
sample_size = n, n_cat = 2)
new_parameters <- em_function_2stage(starting_values,
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = n, n_cat = 2)
new_parameters
param_current <- starting_values
loglik_value <- loglik_2stage(starting_values,
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = 2)
beta_current = matrix(param_current[1:ncol(X)], ncol = 1)
gamma_current = matrix(c(param_current[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))]),
ncol = n_cat, byrow = FALSE)
delta_current = array(c(param_current[(ncol(X) + (n_cat * ncol(Z)) + 1):length(param_current)]),
dim = c(ncol(Z), 2, 2))
sample_size <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
v_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_delta <- array(c(1.5, 1, .5, .5, -.5, 0, -1, -1), dim = c(2, 2, 2))
my_data <- COMBO_data_2stage(sample_size = sample_size,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape, v_shape = v_shape,
beta = true_beta, gamma = true_gamma, delta = true_delta)
obs_Ystar_matrix = my_data[["obs_Ystar_matrix"]]
obs_Ytilde_matrix = my_data[["obs_Ytilde_matrix"]]
X = my_data[["x_design_matrix"]]
Z = my_data[["z_design_matrix"]]
V = my_data[["v_design_matrix"]]
starting_values <- rnorm(14)
loglik_value <- loglik_2stage(starting_values,
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = 2)
loglik_value
set.seed(123)
n <- 500
x_mu <- 0
x_sigma <- 1
z_shape <- 1
v_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_delta <- array(c(1.5, 1, .5, .5, -.5, 0, -1, -1), dim = c(2, 2, 2))
my_data <- COMBO_data_2stage(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape, v_shape = v_shape,
beta = true_beta, gamma = true_gamma, delta = true_delta)
table(my_data[["obs_Ytilde"]], my_data[["obs_Ystar"]], my_data[["true_Y"]])
beta_start <- rep(1, length = length(c(true_beta)))
gamma_start <- rep(1, length = length(c(true_gamma)))
delta_start <- rep(1, length = length(c(true_delta)))
EM_results <- COMBO_EM_2stage(Ystar = my_data[["obs_Ystar"]],
Ytilde = my_data[["obs_Ytilde"]],
x_matrix = my_data[["x"]],
z_matrix = my_data[["z"]],
v_matrix = my_data[["v"]],
beta_start = beta_start,
gamma_start = gamma_start,
delta_start = delta_start)
n_cat = 2
sample_size = length(Ystar)
sample_size_tilde <- length(Ytilde)
Ystar = my_data[["obs_Ystar"]]
Ytilde = my_data[["obs_Ytilde"]]
x_matrix = my_data[["x"]]
_matrix = my_data[["z"]]
z_matrix = my_data[["z"]]
v_matrix = my_data[["v"]]
n_cat = 2
sample_size = length(Ystar)
sample_size_tilde <- length(Ytilde)
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
V = matrix(c(rep(1, sample_size), c(v_matrix)),
byrow = FALSE, nrow = sample_size)
obs_Ystar_reps = matrix(rep(Ystar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Ystar_matrix = 1 * (obs_Ystar_reps == category_matrix)
obs_Ytilde_reps <- matrix(rep(Ytilde, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix <- matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Ytilde_matrix <- 1 * (obs_Ytilde_reps == category_matrix)
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
tolerance = 0.01
max_em_iterations = 20
em_method = "squarem"
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start), c(delta_start)),
fixptfn = em_function_2stage, objfn = loglik_2stage,
method = c(em_method),
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
results
em_function_2stage(c(c(beta_start), c(gamma_start), c(delta_start)), obs_Ystar_matrix, obs_Ytilde_matrix, X, Z, V, sample_size, n_cat)
loglik_2stage(c(c(beta_start), c(gamma_start), c(delta_start)), obs_Ystar_matrix, obs_Ytilde_matrix, X, Z, V, sample_size, n_cat)
em_method = "em"
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start), c(delta_start)),
fixptfn = em_function_2stage, objfn = loglik_2stage,
method = c(em_method),
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
results
beta_start <- rnorm(length(c(true_beta)))
gamma_start <- rnorm(length(c(true_gamma)))
delta_start <- rnorm(length(c(true_delta)))
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start), c(delta_start)),
fixptfn = em_function_2stage, objfn = loglik_2stage,
method = c(em_method),
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
results
em_method = "squarem"
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start), c(delta_start)),
fixptfn = em_function_2stage, objfn = loglik_2stage,
method = c(em_method),
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
results
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start), c(delta_start)),
fixptfn = em_function_2stage, #objfn = loglik_2stage,
method = c(em_method),
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
# Do label switching correction within the EM algorithm simulation
results_i_gamma <- matrix(turboEM::pars(results)[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))],
ncol = n_cat, byrow = FALSE)
results_i_pistar_v <- pistar_compute(results_i_gamma, Z, sample_size, n_cat)
results
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start), c(delta_start)),
fixptfn = em_function_2stage, objfn = loglik_2stage,
method = c(em_method),
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
results
pkgdown::build_site()
pkgdown::build_site()
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
v_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_delta <- array(c(1.5, 1, .5, .5, -.5, 0, -1, -1), dim = c(2, 2, 2))
my_data <- COMBO_data_2stage(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape, v_shape = v_shape,
beta = true_beta, gamma = true_gamma, delta = true_delta)
table(my_data[["obs_Ytilde"]], my_data[["obs_Ystar"]], my_data[["true_Y"]])
beta_start <- rnorm(length(c(true_beta)))
gamma_start <- rnorm(length(c(true_gamma)))
delta_start <- rnorm(length(c(true_delta)))
EM_results <- COMBO_EM_2stage(Ystar = my_data[["obs_Ystar"]],
Ytilde = my_data[["obs_Ytilde"]],
x_matrix = my_data[["x"]],
z_matrix = my_data[["z"]],
v_matrix = my_data[["v"]],
beta_start = beta_start,
gamma_start = gamma_start,
delta_start = delta_start)
Ystar = my_data[["obs_Ystar"]]
Ytilde = my_data[["obs_Ytilde"]]
x_matrix = my_data[["x"]]
z_matrix = my_data[["z"]]
v_matrix = my_data[["v"]]
em_method
n_cat = 2
sample_size = length(Ystar)
sample_size_tilde <- length(Ytilde)
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
V = matrix(c(rep(1, sample_size), c(v_matrix)),
byrow = FALSE, nrow = sample_size)
obs_Ystar_reps = matrix(rep(Ystar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Ystar_matrix = 1 * (obs_Ystar_reps == category_matrix)
obs_Ytilde_reps <- matrix(rep(Ytilde, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix <- matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Ytilde_matrix <- 1 * (obs_Ytilde_reps == category_matrix)
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start), c(delta_start)),
fixptfn = em_function_2stage, objfn = loglik_2stage,
method = c(em_method),
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
results
# Do label switching correction within the EM algorithm simulation
results_i_gamma <- matrix(turboEM::pars(results)[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))],
ncol = n_cat, byrow = FALSE)
results_i_pistar_v <- pistar_compute(results_i_gamma, Z, sample_size, n_cat)
results_i_delta <- array(pars(results)[((ncol(X) + (n_cat * ncol(Z))) + 1):length(pars(results))],
dim = c(ncol(V), n_cat, n_cat))
results_i_pitilde <- pitilde_compute(results_i_delta, V, sample_size, n_cat)
pistar_11 <- mean(results_i_pistar_v[1:sample_size, 1])
pistar_22 <- mean(results_i_pistar_v[(sample_size + 1):(2*sample_size), 2])
pitilde_111 <- mean(results_i_pitilde[1:sample_size, 1, 1])
pitilde_222 <- mean(results_i_pitilde[(sample_size + 1):(2*sample_size), 2, 2])
estimates_i <- if ((pistar_11 > .50 | pistar_22 > .50 | pitilde_111 > .50 | pitilde_222 > .50) |
(is.na(pistar_11) & is.na(pistar_22))) {
# If turboem cannot estimate the parameters they will be NA.
turboEM::pars(results)
} else {
gamma_index = (ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))
n_gamma_param = length(gamma_index) / n_cat
gamma_flip_index = ncol(X) + c((n_gamma_param + 1):length(gamma_index), 1:n_gamma_param)
delta_index = ((ncol(X) + (n_cat * ncol(Z))) + 1):length(pars(results))
n_delta_param = length(delta_index) / n_cat
delta_flip_index = (ncol(X) + (n_cat * ncol(Z))) + c((n_delta_param + 1):length(delta_index), 1:n_delta_param)
c(-1*turboEM::pars(results)[1:ncol(X)], turboEM::pars(results)[c(gamma_flip_index, delta_flip_index)])
}
estimates_i
sigma_EM = solve(turboEM::hessian(results)[[1]])
SE_EM = sqrt(diag(matrix(Matrix::nearPD(sigma_EM)$mat,
nrow = length(c(c(beta_start), c(gamma_start))),
byrow = FALSE)))
SE_EM = sqrt(diag(matrix(Matrix::nearPD(sigma_EM)$mat,
nrow = length(c(c(beta_start), c(gamma_start), c(delta_start))),
byrow = FALSE)))
beta_param_names <- paste0(rep("beta", ncol(X)), 1:ncol(X))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
delta_param_names <- paste0(rep("delta", length(c(delta_start))),
rep(1:ncol(V), n_cat * n_cat),
rep(1, length(c(delta_start))),
rep(c(rep(1, ncol(V)), rep(2, ncol(V))), n_cat),
c(rep(1, ncol(V) * n_cat), rep(2, ncol(V) * n_cat)))
estimates <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
delta_param_names),
Estimates = c(estimates_i),
SE = c(SE_EM),
Convergence = c(rep(results$convergence,
length(c(beta_param_names,
gamma_param_names,
delta_param_names)))))
estimates
#' EM_results <- COMBO_EM_2stage(Ystar = my_data[["obs_Ystar"]],
#'                               Ytilde = my_data[["obs_Ytilde"]],
#'                               x_matrix = my_data[["x"]],
#'                               z_matrix = my_data[["z"]],
#'                               v_matrix = my_data[["v"]],
#'                               beta_start = beta_start,
#'                               gamma_start = gamma_start,
#'                               delta_start = delta_start)
#'
#' EM_results
COMBO_EM_2stage <- function(Ystar, Ytilde,
x_matrix, z_matrix, v_matrix,
beta_start, gamma_start, delta_start,
tolerance = 1e-7, max_em_iterations = 1500,
em_method = "squarem"){
if (is.data.frame(z_matrix))
z_matrix <- as.matrix(z_matrix)
if (!is.numeric(z_matrix))
stop("'z_matrix' should be a numeric matrix.")
if (is.vector(z_matrix))
z_matrix <- as.matrix(z_matrix)
if (!is.matrix(z_matrix))
stop("'z_matrix' should be a matrix or data.frame.")
if (is.vector(v_matrix))
v_matrix <- as.matrix(v_matrix)
if (!is.matrix(v_matrix))
stop("'v_matrix' should be a matrix or data.frame.")
if (!is.null(x_matrix)) {
if (is.data.frame(x_matrix))
x_matrix <- as.matrix(x_matrix)
if (!is.numeric(x_matrix))
stop("'x_matrix' must be numeric.")
if (is.vector(x_matrix))
x_matrix <- as.matrix(x_matrix)
if (!is.matrix(x_matrix))
stop("'x_matrix' must be a data.frame or matrix.")
}
if (!is.numeric(Ystar) || !is.vector(Ystar))
stop("'Ystar' must be a numeric vector.")
if (length(setdiff(1:2, unique(Ystar))) != 0)
stop("'Ystar' must be coded 1/2, where the reference category is 2.")
if (!is.numeric(Ytilde) || !is.vector(Ytilde))
stop("'Ystar' must be a numeric vector.")
if (length(setdiff(1:2, unique(Ytilde))) != 0)
stop("'Ystar' must be coded 1/2, where the reference category is 2.")
n_cat = 2
sample_size = length(Ystar)
sample_size_tilde <- length(Ytilde)
if (sample_size_tilde != sample_size)
stop("The lengths of 'Ystar' and 'Ytilde' must be the same.")
if (nrow(z_matrix) != sample_size)
stop("The number of rows of 'z_matrix' must match the length of 'Ystar'.")
if (nrow(v_matrix) != sample_size_tilde)
stop("The number of rows of 'v_matrix' must match the length of 'Ytilde'.")
if (!is.null(x_matrix) && nrow(x_matrix) != sample_size)
stop("The number of rows of 'x_matrix' must match the length of 'Ystar'.")
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
V = matrix(c(rep(1, sample_size), c(v_matrix)),
byrow = FALSE, nrow = sample_size)
obs_Ystar_reps = matrix(rep(Ystar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Ystar_matrix = 1 * (obs_Ystar_reps == category_matrix)
obs_Ytilde_reps <- matrix(rep(Ytilde, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix <- matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Ytilde_matrix <- 1 * (obs_Ytilde_reps == category_matrix)
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start), c(delta_start)),
fixptfn = em_function_2stage, objfn = loglik_2stage,
method = c(em_method),
obs_Ystar_matrix = obs_Ystar_matrix,
obs_Ytilde_matrix = obs_Ytilde_matrix,
X = X, Z = Z, V = V,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
# Do label switching correction within the EM algorithm simulation
results_i_gamma <- matrix(turboEM::pars(results)[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))],
ncol = n_cat, byrow = FALSE)
results_i_pistar_v <- pistar_compute(results_i_gamma, Z, sample_size, n_cat)
results_i_delta <- array(pars(results)[((ncol(X) + (n_cat * ncol(Z))) + 1):length(pars(results))],
dim = c(ncol(V), n_cat, n_cat))
results_i_pitilde <- pitilde_compute(results_i_delta, V, sample_size, n_cat)
pistar_11 <- mean(results_i_pistar_v[1:sample_size, 1])
pistar_22 <- mean(results_i_pistar_v[(sample_size + 1):(2*sample_size), 2])
pitilde_111 <- mean(results_i_pitilde[1:sample_size, 1, 1])
pitilde_222 <- mean(results_i_pitilde[(sample_size + 1):(2*sample_size), 2, 2])
estimates_i <- if ((pistar_11 > .50 | pistar_22 > .50 | pitilde_111 > .50 | pitilde_222 > .50) |
(is.na(pistar_11) & is.na(pistar_22))) {
# If turboem cannot estimate the parameters they will be NA.
turboEM::pars(results)
} else {
gamma_index = (ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))
n_gamma_param = length(gamma_index) / n_cat
gamma_flip_index = ncol(X) + c((n_gamma_param + 1):length(gamma_index), 1:n_gamma_param)
delta_index = ((ncol(X) + (n_cat * ncol(Z))) + 1):length(pars(results))
n_delta_param = length(delta_index) / n_cat
delta_flip_index = (ncol(X) + (n_cat * ncol(Z))) + c((n_delta_param + 1):length(delta_index), 1:n_delta_param)
c(-1*turboEM::pars(results)[1:ncol(X)], turboEM::pars(results)[c(gamma_flip_index, delta_flip_index)])
}
#sigma_EM = tryCatch(solve(turboEM::hessian(results)[[1]]), silent = TRUE,
#                    error = function(e) NA)
#SE_EM = tryCatch(sqrt(diag(matrix(Matrix::nearPD(sigma_EM)$mat,
#                                  row = length(c(c(beta_start), c(gamma_start))),
#                                  byrow = FALSE))),
#                 silent = TRUE,
#                 error = function(e) rep(NA, ncol(X) + (n_cat * ncol(Z))))
sigma_EM = solve(turboEM::hessian(results)[[1]])
SE_EM = sqrt(diag(matrix(Matrix::nearPD(sigma_EM)$mat,
nrow = length(c(c(beta_start), c(gamma_start), c(delta_start))),
byrow = FALSE)))
beta_param_names <- paste0(rep("beta", ncol(X)), 1:ncol(X))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
delta_param_names <- paste0(rep("delta", length(c(delta_start))),
rep(1:ncol(V), n_cat * n_cat),
rep(1, length(c(delta_start))),
rep(c(rep(1, ncol(V)), rep(2, ncol(V))), n_cat),
c(rep(1, ncol(V) * n_cat), rep(2, ncol(V) * n_cat)))
estimates <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
delta_param_names),
Estimates = c(estimates_i),
SE = c(SE_EM),
Convergence = c(rep(results$convergence,
length(c(beta_param_names,
gamma_param_names,
delta_param_names)))))
return(estimates)
}
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
v_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_delta <- array(c(1.5, 1, .5, .5, -.5, 0, -1, -1), dim = c(2, 2, 2))
my_data <- COMBO_data_2stage(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape, v_shape = v_shape,
beta = true_beta, gamma = true_gamma, delta = true_delta)
table(my_data[["obs_Ytilde"]], my_data[["obs_Ystar"]], my_data[["true_Y"]])
beta_start <- rnorm(length(c(true_beta)))
gamma_start <- rnorm(length(c(true_gamma)))
delta_start <- rnorm(length(c(true_delta)))
EM_results <- COMBO_EM_2stage(Ystar = my_data[["obs_Ystar"]],
Ytilde = my_data[["obs_Ytilde"]],
x_matrix = my_data[["x"]],
z_matrix = my_data[["z"]],
v_matrix = my_data[["v"]],
beta_start = beta_start,
gamma_start = gamma_start,
delta_start = delta_start)
EM_results
devtools::document()
pkgdown::build_site()
devtools::install_github("kimhochstedler/COMBO")
library(COMBO)
detach("package:COMBO", unload = TRUE)
devtools::install_github("kimhochstedler/COMBO")
pkgdown::build_site()
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
v_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_delta <- array(c(1.5, 1, .5, .5, -.5, 0, -1, -1), dim = c(2, 2, 2))
my_data <- COMBO_data_2stage(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape, v_shape = v_shape,
beta = true_beta, gamma = true_gamma, delta = true_delta)
weights = w_j_2stage(my_data[["obs_Ystar_matrix"]],
my_data[["obs_Ytilde_matrix"]],
pitilde_compute(true_delta, my_data[["v_design_matrix"]],
sample_size, n_cat),
pistar_compute(true_gamma, my_data[["z_design_matrix"]],
sample_size, n_cat),
pi_compute(true_beta, my_data[["x_design_matrix"]],
sample_size, n_cat),
sample_size, n_cat)
head(weights)
q_delta_f(c(c(true_beta), c(true_gamma), c(true_delta)),
my_data[["v_design_matrix"]],
my_data[["obs_Ystar_matrix"]],
my_data[["obs_Ytilde_matrix"]],
weights, sample_size, n_cat)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
.Last.error
