scale_color_brewer(palette = "Spectral") +
ggtitle("EM Algorithm Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency")
################################################################################
# Parameter Estimates - MCMC
MCMC_df <- results_df %>%
filter(Method == "MCMC") %>%
filter(Stat %in% c("Posterior Mean", "Posterior Median"))
# Note label switching in naive case! (Multiply results by -1)
MCMC_results <- MCMC_df %>%
group_by(Parameter, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_data <- MCMC_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
Parameter))) %>%
mutate(Estimates = ifelse(Method == "Naive Analysis",
Estimates * -1, Estimates)) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1)) %>%
group_by(Parameter, Method, Stat) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE),
Median_Estimate = median(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_subtitle <- "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method. \nDotted lines represent the median parameter estimate for a given method."
ggplot(data = MCMC_graph_data %>% filter(Stat == "Posterior Mean")) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
geom_vline(aes(xintercept = Median_Estimate, color = Method),
linetype = "dotted") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("MCMC Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = MCMC_graph_subtitle) +
labs(y = "Frequency")
################################################################################
# Combined results
graph_data <- MCMC_graph_data %>%
filter(Method == "MCMC") %>%
filter(Stat == "Posterior Mean") %>%
dplyr::select(-c(Median_Estimate)) %>%
rbind(EM_graph_data) %>%
mutate(Greek_Parameter = factor(Parameter, labels = c("beta_0",
"beta_X",
"gamma_110",
"gamma_11Z",
"gamma_120",
"gamma_12Z")))
ggplot(data = graph_data) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom")
# Simulation study for 2023 ENAR submission
## Small n, large misclassification rate
################################################################################
# Set up
library(ggplot2)
library(dplyr)
library(tidyr)
library(MASS)
library(Matrix)
library(rjags)
library(turboEM)
library(SAMBA)
save_directory <- "C:/Users/hochsted/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/small_n_v3/"
load(paste0(save_directory, "small_n_sim_results.RData"))
results_df <- do.call("rbind", small_n_sim_results)
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
################################################################################
# Parameter estimates - EM
EM_df <- results_df %>%
filter(Method %in% c("EM", "Perfect Sensitivity EM", "SAMBA EM")) %>%
filter(Stat == "MLE")
EM_results <- EM_df %>%
group_by(Method, Parameter) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
EM_graph_data <- EM_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
Parameter))) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1)) %>%
group_by(Method, Parameter) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE)) %>%
ungroup()
ggplot(data = EM_graph_data) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Spectral") +
scale_color_brewer(palette = "Spectral") +
ggtitle("EM Algorithm Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency")
################################################################################
# Parameter Estimates - MCMC
MCMC_df <- results_df %>%
filter(Method == "MCMC") %>%
filter(Stat %in% c("Posterior Mean", "Posterior Median"))
# Note label switching in naive case! (Multiply results by -1)
MCMC_results <- MCMC_df %>%
group_by(Parameter, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_data <- MCMC_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
Parameter))) %>%
mutate(Estimates = ifelse(Method == "Naive Analysis",
Estimates * -1, Estimates)) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1)) %>%
group_by(Parameter, Method, Stat) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE),
Median_Estimate = median(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_subtitle <- "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method. \nDotted lines represent the median parameter estimate for a given method."
ggplot(data = MCMC_graph_data %>% filter(Stat == "Posterior Mean")) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
geom_vline(aes(xintercept = Median_Estimate, color = Method),
linetype = "dotted") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("MCMC Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = MCMC_graph_subtitle) +
labs(y = "Frequency")
################################################################################
# Combined results
graph_data <- MCMC_graph_data %>%
filter(Method == "MCMC") %>%
filter(Stat == "Posterior Mean") %>%
dplyr::select(-c(Median_Estimate)) %>%
rbind(EM_graph_data) %>%
mutate(Greek_Parameter = factor(Parameter, labels = c("beta_0",
"beta_X",
"gamma_110",
"gamma_11Z",
"gamma_120",
"gamma_12Z")))
ggplot(data = graph_data) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom")
# Simulation study for 2023 ENAR submission
## Small n, large misclassification rate
################################################################################
# Set up
library(ggplot2)
library(dplyr)
library(tidyr)
library(MASS)
library(Matrix)
library(rjags)
library(turboEM)
library(SAMBA)
save_directory <- "C:/Users/hochsted/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/perfect_specificity/"
load(paste0(save_directory, "ps_sim_results.RData"))
results_df <- do.call("rbind", ps_sim_results)
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -5, -5), nrow = 2, byrow = FALSE)
################################################################################
# Parameter estimates - EM
EM_df <- results_df %>%
filter(Method %in% c("EM", "Perfect Sensitivity EM", "SAMBA EM")) %>%
filter(Stat == "MLE")
EM_results <- EM_df %>%
group_by(Method, Parameter) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
EM_graph_data <- EM_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
Parameter))) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -5,
Parameter == "gamma[1,2,2]" ~ -5)) %>%
group_by(Method, Parameter) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE)) %>%
ungroup()
ggplot(data = EM_graph_data) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Spectral") +
scale_color_brewer(palette = "Spectral") +
ggtitle("EM Algorithm Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency")
################################################################################
# Parameter Estimates - MCMC
MCMC_df <- results_df %>%
filter(Method == "MCMC") %>%
filter(Stat %in% c("Posterior Mean", "Posterior Median"))
# Note label switching in naive case! (Multiply results by -1)
MCMC_results <- MCMC_df %>%
group_by(Parameter, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_data <- MCMC_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
Parameter))) %>%
mutate(Estimates = ifelse(Method == "Naive Analysis",
Estimates * -1, Estimates)) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -5,
Parameter == "gamma[1,2,2]" ~ -5)) %>%
group_by(Parameter, Method, Stat) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE),
Median_Estimate = median(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_subtitle <- "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method. \nDotted lines represent the median parameter estimate for a given method."
ggplot(data = MCMC_graph_data %>% filter(Stat == "Posterior Mean")) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
geom_vline(aes(xintercept = Median_Estimate, color = Method),
linetype = "dotted") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("MCMC Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = MCMC_graph_subtitle) +
labs(y = "Frequency")
################################################################################
# Combined results
graph_data <- MCMC_graph_data %>%
filter(Method == "MCMC") %>%
filter(Stat == "Posterior Mean") %>%
dplyr::select(-c(Median_Estimate)) %>%
rbind(EM_graph_data) %>%
mutate(Greek_Parameter = factor(Parameter, labels = c("beta_0",
"beta_X",
"gamma_110",
"gamma_11Z",
"gamma_120",
"gamma_12Z")))
ggplot(data = graph_data) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom")
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_reference()
?glm
devtools::check()
devtools::check()
set.seed(123)
n <- 100
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
x_matrix = matrix(rnorm(n, x_mu, x_sigma), ncol = 1)
X = matrix(c(rep(1, n), x_matrix[,1]), ncol = 2, byrow = FALSE)
z_matrix = matrix(rgamma(n, z_shape), ncol = 1)
Z = matrix(c(rep(1, n), z_matrix[,1]), ncol = 2, byrow = FALSE)
exp_xb = exp(X %*% true_beta)
pi_result = exp_xb[,1] / (exp_xb[,1] + 1)
pi_matrix = matrix(c(pi_result, 1 - pi_result), ncol = 2, byrow = FALSE)
true_Y <- rep(NA, n)
for(i in 1:n){
true_Y[i] = which(stats::rmultinom(1, 1, pi_matrix[i,]) == 1)
}
exp_zg = exp(Z %*% true_gamma)
pistar_denominator = matrix(c(1 + exp_zg[,1], 1 + exp_zg[,2]), ncol = 2, byrow = FALSE)
pistar_result = exp_zg / pistar_denominator
pistar_matrix = matrix(c(pistar_result[,1], 1 - pistar_result[,1],
pistar_result[,2], 1 - pistar_result[,2]),
ncol = 2, byrow = FALSE)
obs_Y <- rep(NA, n)
for(i in 1:n){
true_j = true_Y[i]
obs_Y[i] = which(rmultinom(1, 1,
pistar_matrix[c(i, n + i),
true_j]) == 1)
}
Ystar <- obs_Y
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:6], ncol = 2, nrow = 2, byrow = FALSE)
n_cat = 2
sample_size = length(Ystar)
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
obs_Y_reps = matrix(rep(Ystar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Y_matrix = 1 * (obs_Y_reps == category_matrix)
tolerance <- 1e-7
max_em_iterations <- 1000
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
em_method <- "squarem"
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start)),
fixptfn = em_function, objfn = loglik,
method = c(em_method),
obs_Y_matrix = obs_Y_matrix,
X = X, Z = Z,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
Ystar01 = ifelse(Ystar == 1, 1, ifelse(Ystar == 2, 0, NA))
log_reg = stats::glm(Ystar01 ~ . + 0, as.data.frame(X),
family = "binomial"(link = "logit"))
SAMBA_start <- c(beta_start, c(gamma_start)[1:(1 + ncol(z_matrix))])
SAMBA_i <- SAMBA::obsloglikEM(Ystar01, Z = x_matrix,
X = z_matrix, start = SAMBA_start,
tol = tolerance,
maxit = max_em_iterations)
sigma_EM = solve(turboEM::hessian(results)[[1]])
SE_EM = sqrt(diag(Matrix::nearPD(sigma_EM)$mat))
sigma_EM = solve(turboEM::hessian(results)[[1]])
Matrix::nearPD(sigma_EM)$mat
matrix(Matrix::nearPD(sigma_EM)$mat)
matrix(Matrix::nearPD(sigma_EM)$mat, ncol = length(c(c(beta_start), c(gamma_start))), byrow = FALSE)
Matrix::nearPD(sigma_EM)$mat
devtools::check()
devtools::check()
pkgdown::build_site()
pkgdown::build_site()
devtools::install_github("kimhochstedler/COMBO")
library(COMBO)
library(dplyr)
# Set seed.
set.seed(12345)
# Set sample size, x and z distribution information.
n <- 100
x_mu <- 0
x_sigma <- 1
z_shape <- 1
# Set true parameter values.
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(2, 0, -2, 0), nrow = 2, byrow = FALSE)
# Starting values for EM algorithm.
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:6], ncol = 2, nrow = 2, byrow = FALSE)
# Generate data.
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
# Save list elements as vectors.
Ystar <- my_data[["obs_Y"]]
x_matrix <- my_data[["x"]]
z_matrix <- my_data[["z"]]
# Estimate parameters using the EM-Algorithm.
EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
beta_start = beta_start, gamma_start = gamma_start)
EM_results
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
devtools::install_github("kimhochstedler/COMBO")
library(COMBO)
detach("package:COMBO", unload = TRUE)
devtools::install_github("kimhochstedler/COMBO")
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
x_matrix = matrix(rnorm(n, x_mu, x_sigma), ncol = 1)
X = matrix(c(rep(1, n), x_matrix[,1]), ncol = 2, byrow = FALSE)
z_matrix = matrix(rgamma(n, z_shape), ncol = 1)
Z = matrix(c(rep(1, n), z_matrix[,1]), ncol = 2, byrow = FALSE)
exp_xb = exp(X %*% true_beta)
pi_result = exp_xb[,1] / (exp_xb[,1] + 1)
pi_matrix = matrix(c(pi_result, 1 - pi_result), ncol = 2, byrow = FALSE)
true_Y <- rep(NA, n)
for(i in 1:n){
true_Y[i] = which(stats::rmultinom(1, 1, pi_matrix[i,]) == 1)
}
exp_zg = exp(Z %*% true_gamma)
pistar_denominator = matrix(c(1 + exp_zg[,1], 1 + exp_zg[,2]), ncol = 2, byrow = FALSE)
pistar_result = exp_zg / pistar_denominator
pistar_matrix = matrix(c(pistar_result[,1], 1 - pistar_result[,1],
pistar_result[,2], 1 - pistar_result[,2]),
ncol = 2, byrow = FALSE)
obs_Y <- rep(NA, n)
for(i in 1:n){
true_j = true_Y[i]
obs_Y[i] = which(rmultinom(1, 1,
pistar_matrix[c(i, n + i),
true_j]) == 1)
}
Ystar <- obs_Y
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:6], ncol = 2, nrow = 2, byrow = FALSE)
EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
beta_start = beta_start, gamma_start = gamma_start)
library(COMBO)
EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
beta_start = beta_start, gamma_start = gamma_start)
EM_results
COMBO_EM
devtools::check()
library(COMBO)
detach("package:COMBO", unload = TRUE)
devtools::install_github("kimhochstedler/COMBO")
EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
beta_start = beta_start, gamma_start = gamma_start)
library(COMBO)
EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
beta_start = beta_start, gamma_start = gamma_start)
EM_results
EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
beta_start = beta_start, gamma_start = gamma_start)
detach("package:COMBO", unload = TRUE)
devtools::install_github("kimhochstedler/COMBO")
devtools::install_github("kimhochstedler/COMBO", force = TRUE)
library(COMBO)
EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
beta_start = beta_start, gamma_start = gamma_start)
EM_results
pkgdown::build_site()
