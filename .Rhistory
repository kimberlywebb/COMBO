labs(x = "Parameter", y = "Estimate", color = "Method") +
theme(legend.position = "bottom")
# Create matrix of gamma parameter estimates from the EM algorithm.
EM_gamma <- matrix(EM_results$Estimates[3:6], ncol = 2, byrow = FALSE)
EM_gamma2 <- array(EM_results$Estimates[7:14], dim = c(2,2,2))
# Compute misclassification probabilities.
EM_misclassification_prob <- misclassification_prob(EM_gamma,
matrix(z1_matrix, ncol = 1))
EM_misclassification_prob2 <- misclassification_prob2(EM_gamma2,
matrix(z2_matrix, ncol = 1))
# Find the average sensitivity and specificity.
EM_sensitivity_df <- EM_misclassification_prob %>%
filter(Y == 1) %>% filter(Ystar== 1)
EM_sensitivity <- mean(EM_sensitivity_df$Probability)
EM_specificity_df <- EM_misclassification_prob %>%
filter(Y == 2) %>% filter(Ystar == 2)
EM_specificity <- mean(EM_specificity_df$Probability)
EM_sensitivity2_df <- EM_misclassification_prob2 %>%
filter(Y == 1) %>% filter(Ystar1 == 1) %>% filter(Ystar2 == 1)
EM_sensitivity2 <- mean(EM_sensitivity2_df$Probability)
EM_specificity2_df <- EM_misclassification_prob2 %>%
filter(Y == 2) %>% filter(Ystar1 == 2) %>% filter(Ystar2 == 2)
EM_specificity2 <- mean(EM_specificity2_df$Probability)
# Create matrix of gamma parameter estimates from MCMC.
MCMC_gamma <- matrix(MCMC_results$posterior_means_df$posterior_mean[3:6],
ncol = 2, byrow = TRUE)
MCMC_gamma2 <- array(MCMC_results$posterior_means_df$posterior_mean[c(7, 11,
9, 13,
8, 12,
10, 14)],
dim = c(2,2,2))
# Compute misclassification probabilities.
MCMC_misclassification_prob <- misclassification_prob(MCMC_gamma,
matrix(z1_matrix, ncol = 1))
MCMC_misclassification_prob2 <- misclassification_prob2(MCMC_delta,
matrix(z2_matrix, ncol = 1))
# Find the average sensitivity and specificity
MCMC_sensitivity_df <- MCMC_misclassification_prob %>%
filter(Y == 1) %>% filter(Ystar == 1)
MCMC_sensitivity <- mean(MCMC_sensitivity_df$Probability)
MCMC_specificity_df <- MCMC_misclassification_prob %>%
filter(Y == 2) %>% filter(Ystar == 2)
MCMC_specificity <- mean(MCMC_specificity_df$Probability)
MCMC_sensitivity2_df <- MCMC_misclassification_prob2 %>%
filter(Y == 1) %>% filter(Ystar1 == 1) %>% filter(Ystar2== 1)
MCMC_sensitivity2 <- mean(MCMC_sensitivity2_df$Probability)
MCMC_specificity2_df <- MCMC_misclassification_prob2 %>%
filter(Y == 2) %>% filter(Ystar1 == 2) %>% filter(Ystar2 == 2)
MCMC_specificity2 <- mean(MCMC_specificity2_df$Probability)
# Use the generated data to compute the actual sensitivity and specificity rate.
data_classification_table <- table(my_data[["obs_Ystar1"]], my_data[["true_Y"]])
data_classification_table2 <- table(my_data[["obs_Ystar2"]],
my_data[["obs_Ystar1"]], my_data[["true_Y"]])
true_sensitivity <- prop.table(data_classification_table, 2)[1,1]
true_specificity <- prop.table(data_classification_table, 2)[2,2]
true_sensitivity_2stage <- data_classification_table2[1,1,1] /
sum(data_classification_table2[,1,1])
true_specificity_2stage <- data_classification_table2[2,2,2] /
sum(data_classification_table2[,2,2])
misclass_results <- data.frame(Data = c(true_sensitivity, true_specificity),
EM = c(EM_sensitivity, EM_specificity),
MCMC = c(MCMC_sensitivity, MCMC_specificity)) %>%
round(3)
misclass_results2 <- data.frame(Data = c(true_sensitivity_2stage, true_specificity_2stage),
EM = c(EM_sensitivity2, EM_specificity2),
MCMC = c(MCMC_sensitivity2, MCMC_specificity2)) %>%
round(3)
kbl(t(misclass_results), col.names = c("Sensitivity, P(Y*(1) = 1 | Y = 1)",
"Specificity, P(Y*(1) = 2 | Y = 2)"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
kbl(t(misclass_results2), col.names = c("P(Y*(2) = 1 |Y*(1) = 1,  Y = 1)",
"P(Y*(2) = 2 | Y*(1) = 2, Y = 2)"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
pkgdown::build_site()
library(ggplot2)
library(dplyr)
library(tidyr)
library(MASS)
library(Matrix)
library(rjags)
library(turboEM)
library(SAMBA)
save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/large_n_v2/"
load(paste0(save_directory, "large_n_sim_results.RData"))
save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/large_n_MCMCredo2/"
load(paste0(save_directory, "large_n_MCMCredo_sim_results.RData"))
save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/large_n_MCMCredo2/"
load(paste0(save_directory, "large_n_MCMCredo_sim_results_normal_prior.RData"))
results_df <- do.call("rbind", large_n_sim_results)
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
MCMC_df <- results_df %>%
filter(Method == "MCMC") %>%
filter(Stat %in% c("Posterior Mean", "Posterior Median")) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1))
# Note label switching in naive case! (Multiply results by -1)
MCMC_results <- MCMC_df %>%
group_by(Parameter, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_data <- MCMC_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
as.character(Parameter)))) %>%
mutate(Estimates = ifelse(Method == "Naive Analysis",
Estimates * -1, Estimates)) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1)) %>%
group_by(Parameter, Method, Stat) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE),
Median_Estimate = median(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_subtitle <- "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method. \nDotted lines represent the median parameter estimate for a given method."
ggplot(data = MCMC_graph_data %>% filter(Stat == "Posterior Mean")) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
geom_vline(aes(xintercept = Median_Estimate, color = Method),
linetype = "dotted") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("MCMC Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = MCMC_graph_subtitle) +
labs(y = "Frequency")
graph_data <- MCMC_graph_data %>%
filter(Method == "MCMC") %>%
filter(Stat == "Posterior Mean") %>%
dplyr::select(-c(Median_Estimate)) %>%
#rbind(EM_graph_data) %>%
mutate(Greek_Parameter = factor(Parameter, labels = c("beta_0",
"beta_X",
"gamma_110",
"gamma_11Z",
"gamma_120",
"gamma_12Z")))
ggplot(data = graph_data) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
facet_wrap(~ Greek_Parameter, scales = "free", ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method.") +
labs(y = "Frequency") +
theme(legend.position = "bottom")
all_results <- graph_data %>%
group_by(Method, Parameter, True_Value) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup() %>%
mutate(Bias = Mean - True_Value) %>%
mutate(rMSE = sqrt(Bias^2 + SD^2))
all_results
devtools::document
devtools::document()
devtools::check()
install.packages("gdtools")
library(gdtools)
library(xtable)
knitr::opts_chunk$set(echo = FALSE)
library(kableExtra)
Term <- c("$X$", "$Z$", "$Y$", "$y_{ij}$", "$Y^*$", "$y^*_{ik}$",
"True Outcome Mechanism", "Observation Mechanism",
"$\\pi_{ij}$", "$\\pi^*_{ikj}$", "$\\pi^*_{ik}$", "$\\pi^*_{jj}$",
"Sensitivity", "Specificity",
"$\\beta_X$", "$\\gamma_{11Z}$", "$\\gamma_{12Z}$")
Definition <- c("--", "--",
"$Y \\in \\{1, 2\\}$", "$\\mathbb{I}\\{Y_i = j\\}$",
"$Y^* \\in \\{1, 2\\}$", "$\\mathbb{I}\\{Y^*_i = k\\}$",
"$\\text{logit} \\{ P(Y = j | X ; \\beta) \\} = \\beta_{j0} + \\beta_{jX} X$",
"$\\text{logit}\\{ P(Y^* = k | Y = j, Z ; \\gamma) \\} = \\gamma_{kj0} + \\gamma_{kjZ} Z$",
"$P(Y_i = j | X ; \\beta) = \\frac{\\text{exp}\\{\\beta_{j0} + \\beta_{jX} X_i\\}}{1 + \\text{exp}\\{\\beta_{j0} + \\beta_{jX} X_i\\}}$",
"$P(Y^*_i = k | Y_i = j, Z ; \\gamma) = \\frac{\\text{exp}\\{\\gamma_{kj0} + \\gamma_{kjZ} Z_i\\}}{1 + \\text{exp}\\{\\gamma_{kj0} + \\gamma_{kjZ} Z_i\\}}$",
"$P(Y^*_i = k | Y_i, X, Z ; \\gamma) = \\sum_{j = 1}^2 \\pi^*_{ikj} \\pi_{ij}$",
"$P(Y^* = j | Y = j, Z ; \\gamma) = \\sum_{i = 1}^N \\pi^*_{ijj}$",
"$P(Y^* = 1 | Y = 1, Z ; \\gamma) = \\sum_{i = 1}^N \\pi^*_{i11}$",
"$P(Y^* = 2 | Y = 2, Z ; \\gamma) = \\sum_{i = 1}^N \\pi^*_{i22}$",
"--", "--", "--")
Description <- c("Predictor matrix for the true outcome.",
"Predictor matrix for the observed outcome, conditional on the true outcome.",
"True binary outcome. Reference category is 2.",
"Indicator for the true binary outcome.",
"Observed binary outcome. Reference category is 2.",
"Indicator for the observed binary outcome.",
"Relationship between $X$ and the true outcome, $Y$.",
"Relationship between $Z$ and the observed outcome, $Y^*$, given the true outcome $Y$.",
"Response probability for individual $i$'s true outcome category.",
"Response probability for individual $i$'s observed outcome category, conditional on the true outcome.",
"Response probability for individual $i$'s observed outcome cateogry.",
"Average probability of correct classification for category $j$.",
"True positive rate. Average probability of observing outcome $k = 1$, given the true outcome $j = 1$.",
"True negative rate. Average probability of observing outcome $k = 2$, given the true outcome $j = 2$.",
"Association parameter of interest in the true outcome mechanism.",
"Association parameter of interest in the observation mechanism, given $j=1$.",
"Association parameter of interest in the observation mechanism, given $j=2$.")
notation_table <- data.frame(Term, Definition, Description)
xtable(notation_table)
print(xtable(notation_table))
xtable_notation <- xtable(notation_table)
View(xtable_notation)
?xtable
devtools::document()
devtools::document()
devtools::document()
devtools::check()
pkgdown::build_site()
pkgdown::build_site()
library(COMBO)
detach("package:COMBO", unload = TRUE)
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
data("COMBO_EM_data")
data("COMBO_EM_data")
View(COMBO_EM_data)
head(COMBO_EM_data)
names(COMBO_EM_data)
head(COMBO_EM_data$pistar)
summary(rowSums(COMBO_EM_data$pistar))
## code to prepare `COMBO_EM_data` dataset goes here
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
x_matrix = matrix(rnorm(n, x_mu, x_sigma), ncol = 1)
X = matrix(c(rep(1, n), x_matrix[,1]), ncol = 2, byrow = FALSE)
z_matrix = matrix(rgamma(n, z_shape), ncol = 1)
Z = matrix(c(rep(1, n), z_matrix[,1]), ncol = 2, byrow = FALSE)
exp_xb = exp(X %*% true_beta)
pi_result = exp_xb[,1] / (exp_xb[,1] + 1)
pi_matrix = matrix(c(pi_result, 1 - pi_result), ncol = 2, byrow = FALSE)
true_Y <- rep(NA, n)
for(i in 1:n){
true_Y[i] = which(stats::rmultinom(1, 1, pi_matrix[i,]) == 1)
}
exp_zg = exp(Z %*% true_gamma)
pistar_denominator = matrix(c(1 + exp_zg[,1], 1 + exp_zg[,2]), ncol = 2, byrow = FALSE)
pistar_result = exp_zg / pistar_denominator
pistar_matrix = matrix(c(pistar_result[,1], 1 - pistar_result[,1],
pistar_result[,2], 1 - pistar_result[,2]),
ncol = 2, byrow = FALSE)
obs_Y <- rep(NA, n)
for(i in 1:n){
true_j = true_Y[i]
obs_Y[i] = which(rmultinom(1, 1,
pistar_matrix[c(i, n + i),
true_j]) == 1)
}
Ystar <- obs_Y
COMBO_EM_data = list(
Y = true_Y,
Ystar = Ystar,
x_matrix = x_matrix,
z_matrix = z_matrix,
true_beta = true_beta,
true_gamma = true_gamma
)
usethis::use_data(COMBO_EM_data, overwrite = TRUE)
data("COMBO_EM_data")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::check()
pkgdown::build_site()
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
x_matrix = matrix(rnorm(n, x_mu, x_sigma), ncol = 1)
X = matrix(c(rep(1, n), x_matrix[,1]), ncol = 2, byrow = FALSE)
z_matrix = matrix(rgamma(n, z_shape), ncol = 1)
Z = matrix(c(rep(1, n), z_matrix[,1]), ncol = 2, byrow = FALSE)
identical(x_matrix, z_matrix)
z_matrix <- x_matrix
identical(x_matrix, z_matrix)
#' Ystar <- obs_Y
#'
#' starting_values <- rep(1,6)
#' beta_start <- matrix(starting_values[1:2], ncol = 1)
#' gamma_start <- matrix(starting_values[3:6], ncol = 2, nrow = 2, byrow = FALSE)
#'
#' EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
#'                        beta_start = beta_start, gamma_start = gamma_start)
#'
#' EM_results}
COMBO_EM <- function(Ystar,
x_matrix, z_matrix,
beta_start, gamma_start,
tolerance = 1e-7, max_em_iterations = 1500,
em_method = "squarem"){
if (is.data.frame(z_matrix))
z_matrix <- as.matrix(z_matrix)
if (!is.numeric(z_matrix))
stop("'z_matrix' should be a numeric matrix.")
if (is.vector(z_matrix))
z_matrix <- as.matrix(z_matrix)
if (!is.matrix(z_matrix))
stop("'z_matrix' should be a matrix or data.frame.")
if (!is.null(x_matrix)) {
if (is.data.frame(x_matrix))
x_matrix <- as.matrix(x_matrix)
if (!is.numeric(x_matrix))
stop("'x_matrix' must be numeric.")
if (is.vector(x_matrix))
x_matrix <- as.matrix(x_matrix)
if (!is.matrix(x_matrix))
stop("'x_matrix' must be a data.frame or matrix.")
}
if(identical(x_matrix, z_matrix))
warning("'x_matrix' and 'z_matrix' are identical, which may cause problems with model convergence.")
if (!is.numeric(Ystar) || !is.vector(Ystar))
stop("'Ystar' must be a numeric vector.")
if (length(setdiff(1:2, unique(Ystar))) != 0)
stop("'Ystar' must be coded 1/2, where the reference category is 2.")
n_cat = 2
sample_size = length(Ystar)
if (nrow(z_matrix) != sample_size)
stop("The number of rows of 'z_matrix' must match the length of 'Ystar'.")
if (!is.null(x_matrix) && nrow(x_matrix) != sample_size)
stop("The number of rows of 'x_matrix' must match the length of 'Ystar'.")
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
obs_Y_reps = matrix(rep(Ystar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Y_matrix = 1 * (obs_Y_reps == category_matrix)
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start)),
fixptfn = em_function, objfn = loglik,
method = c(em_method),
obs_Y_matrix = obs_Y_matrix,
X = X, Z = Z,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
Ystar01 = ifelse(Ystar == 1, 1, ifelse(Ystar == 2, 0, NA))
log_reg = stats::glm(Ystar01 ~ . + 0, as.data.frame(X),
family = "binomial"(link = "logit"))
SAMBA_start <- c(beta_start, c(gamma_start)[1:(1 + ncol(z_matrix))])
SAMBA_i <- SAMBA::obsloglikEM(Ystar01, Z = x_matrix,
X = z_matrix, start = SAMBA_start,
tol = tolerance,
maxit = max_em_iterations)
perfect_sens_start <- c(beta_start, c(gamma_start)[(2 + ncol(z_matrix)):length(c(gamma_start))])
perfect_sens_i <- perfect_sensitivity_EM(Ystar01, Z = x_matrix,
X = z_matrix, start = perfect_sens_start,
tolerance = tolerance,
max_em_iterations = max_em_iterations)
# Do label switching correction within the EM algorithm simulation
results_i_gamma <- matrix(turboEM::pars(results)[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))],
ncol = n_cat, byrow = FALSE)
results_i_pistar_v <- pistar_compute(results_i_gamma, Z, sample_size, n_cat)
pistar_11 <- mean(results_i_pistar_v[1:sample_size, 1])
pistar_22 <- mean(results_i_pistar_v[(sample_size + 1):(2*sample_size), 2])
flip_pistar11 <- 1 - pistar_22
flip_pistar22 <- 1 - pistar_11
J <- pistar_11 + pistar_22 - 1
J_flip <- flip_pistar11 + flip_pistar22 - 1
estimates_i <- if ((J_flip <= J) |
(is.na(pistar_11) & is.na(pistar_22))) {
# If turboem cannot estimate the parameters they will be NA.
turboEM::pars(results)
} else {
gamma_index = (ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))
n_gamma_param = length(gamma_index) / n_cat
gamma_flip_index = ncol(X) + c((n_gamma_param + 1):length(gamma_index), 1:n_gamma_param)
c(-1*turboEM::pars(results)[1:ncol(X)], turboEM::pars(results)[gamma_flip_index])
}
#sigma_EM = tryCatch(solve(turboEM::hessian(results)[[1]]), silent = TRUE,
#                    error = function(e) NA)
#SE_EM = tryCatch(sqrt(diag(matrix(Matrix::nearPD(sigma_EM)$mat,
#                                  row = length(c(c(beta_start), c(gamma_start))),
#                                  byrow = FALSE))),
#                 silent = TRUE,
#                 error = function(e) rep(NA, ncol(X) + (n_cat * ncol(Z))))
sigma_EM = solve(turboEM::hessian(results)[[1]])
SE_EM <- if ((J_flip <= J) |
(is.na(pistar_11) & is.na(pistar_22))) {
# If turboem cannot estimate the parameters they will be NA.
sqrt(diag(matrix(Matrix::nearPD(sigma_EM)$mat,
nrow = length(c(c(beta_start), c(gamma_start))),
byrow = FALSE)))
} else {
gamma_index = (ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))
n_gamma_param = length(gamma_index) / n_cat
gamma_flip_index = ncol(X) + c((n_gamma_param + 1):length(gamma_index), 1:n_gamma_param)
sqrt(diag(matrix(Matrix::nearPD(sigma_EM)$mat,
nrow = length(c(c(beta_start), c(gamma_start))),
byrow = FALSE)))[c(1:ncol(X), gamma_flip_index)]
}
beta_param_names <- paste0(rep("beta", ncol(X)), 1:ncol(X))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
SAMBA_beta_param_names <- paste0(rep("SAMBA_beta", ncol(X)), 1:ncol(X))
SAMBA_gamma_param_names <- paste0(rep("SAMBA_gamma", (ncol(Z))),
rep(1:ncol(Z), 1),
rep(1, ncol(Z)))
PSens_beta_param_names <- paste0(rep("PSens_beta", ncol(X)), 1:ncol(X))
PSens_gamma_param_names <- paste0(rep("PSens_gamma", (ncol(Z))),
rep(1:ncol(Z), 1),
rep(2, ncol(Z)))
naive_beta_param_names <- paste0("naive_", beta_param_names)
estimates <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
SAMBA_beta_param_names,
SAMBA_gamma_param_names,
PSens_beta_param_names,
PSens_gamma_param_names,
naive_beta_param_names),
Estimates = c(estimates_i,
unname(SAMBA_i$param),
unname(perfect_sens_i$param),
unname(log_reg$coefficients)),
SE = c(SE_EM, sqrt(diag(SAMBA_i$variance)),
sqrt(diag(perfect_sens_i$variance)),
unname(summary(log_reg)$coefficients[,2])),
Convergence = c(rep(results$convergence,
length(c(beta_param_names,
gamma_param_names))),
rep(NA, length(c(SAMBA_beta_param_names,
SAMBA_gamma_param_names))),
rep(NA, length(c(PSens_beta_param_names,
PSens_gamma_param_names))),
rep(log_reg$converged, ncol(X))))
return(estimates)
}
exp_xb = exp(X %*% true_beta)
pi_result = exp_xb[,1] / (exp_xb[,1] + 1)
pi_matrix = matrix(c(pi_result, 1 - pi_result), ncol = 2, byrow = FALSE)
true_Y <- rep(NA, n)
for(i in 1:n){
true_Y[i] = which(stats::rmultinom(1, 1, pi_matrix[i,]) == 1)
}
exp_zg = exp(Z %*% true_gamma)
pistar_denominator = matrix(c(1 + exp_zg[,1], 1 + exp_zg[,2]), ncol = 2, byrow = FALSE)
pistar_result = exp_zg / pistar_denominator
pistar_matrix = matrix(c(pistar_result[,1], 1 - pistar_result[,1],
pistar_result[,2], 1 - pistar_result[,2]),
ncol = 2, byrow = FALSE)
obs_Y <- rep(NA, n)
for(i in 1:n){
true_j = true_Y[i]
obs_Y[i] = which(rmultinom(1, 1,
pistar_matrix[c(i, n + i),
true_j]) == 1)
}
Ystar <- obs_Y
COMBO_EM(Ystar, x_matrix, z_matrix, beta_start = true_beta, true_gamma)
true_beta
true_gamma
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
?pkgdown::build_news
pkgdown::build_news()
pkgdown::build_news()
pkgdown::build_site()
devtools::build()
?turboem
test <- list(a = c(1,2,3,4,5),)
test <- list(a = c(1,2,3,4,5), b = c("a", "b", "c", rep("k", 2)))
test
class(test)
class(test) <- "data.frame"
test
View(test)
class(test) <- "list"
test
?data.frame
attr(test, "row.names") <- 1:5
test
class(test) <- "data.frame"
test
?nlme
??nlme
