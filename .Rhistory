sample_size = length(Ystar)
tolerance = 1e-7
max_em_iterations = 1500
em_method = "squarem"
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
obs_Y_reps = matrix(rep(Ystar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_Y_matrix = 1 * (obs_Y_reps == category_matrix)
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
results = turboEM::turboem(par = c(c(beta_start), c(gamma_start)),
fixptfn = em_function, objfn = loglik,
method = c(em_method),
obs_Y_matrix = obs_Y_matrix,
X = X, Z = Z,
sample_size = sample_size, n_cat = n_cat,
control.run = control_settings)
Ystar01 = ifelse(Ystar == 1, 1, ifelse(Ystar == 2, 0, NA))
log_reg = glm(Ystar01 ~ . + 0, as.data.frame(X),
family = "binomial"(link = "logit"))
SAMBA_i <- SAMBA::obsloglikEM(Ystar01, Z = x_matrix,
X = z_matrix, start = rep(1, 4),
tol = tolerance,
maxit = max_em_iterations)
perfect_sens_i <- perfect_sensitivity_EM(Ystar01, Z = x_matrix,
X = z_matrix, start = rep(1, 4),
tolerance = tolerance,
max_em_iterations = max_em_iterations)
# Do label switching correction within the EM algorithm simulation
results_i_gamma <- matrix(pars(results)[(ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))],
ncol = n_cat, byrow = FALSE)
results_i_pistar_v <- pistar_compute(results_i_gamma, Z, sample_size, n_cat)
pistar_11 <- mean(results_i_pistar_v[1:sample_size, 1])
pistar_22 <- mean(results_i_pistar_v[(sample_size + 1):(2*sample_size), 2])
estimates_i <- if ((pistar_11 > .50 | pistar_22 > .50) |
(is.na(pistar_11) & is.na(pistar_22))) {
# If turboem cannot estimate the parameters they will be NA.
pars(results)
} else {
gamma_index = (ncol(X) + 1):(ncol(X) + (n_cat * ncol(Z)))
n_gamma_param = length(gamma_index) / n_cat
gamma_flip_index = ncol(X) + c((n_gamma_param + 1):length(gamma_index), 1:n_gamma_param)
c(-1*pars(results)[1:ncol(X)], pars(results)[gamma_flip_index])
}
sigma_EM = tryCatch(solve(turboEM::hessian(results)[[1]]), silent = TRUE,
error = function(e) NA)
SE_EM = tryCatch(sqrt(diag(Matrix::nearPD(sigma_EM)$mat)),
silent = TRUE,
error = function(e) rep(NA, ncol(X) + (n_cat * ncol(Z))))
sigma_EM
SE_EM
hessian(results)
hessian(results)[[1]]
turboEM::hessian(results)[[1]]
solve(turboEM::hessian(results)[[1]])
sigma_EM = tryCatch(solve(turboEM::hessian(results)[[1]]), silent = TRUE,
error = function(e) NA)
sigma_EM
SE_EM = tryCatch(sqrt(diag(Matrix::nearPD(sigma_EM)$mat)),
silent = TRUE,
error = function(e) rep(NA, ncol(X) + (n_cat * ncol(Z))))
SE_EM
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::load_all()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
use_mit_liscence()
use_mit_license()
?use_mit_license()
usethis::use_mit_license()
devtools::check()
?rmultinom
?glm
?tryCatch
devtools::check()
?turboEM
??turboEM
devtools::check()
devtools::check()
devtools::check()
?tidyr
devtools::check()
?Reduce
?split
?ceiling
devtools::check()
devtools::check()
devtools::check()
?all_of
?median
devtools::check()
?Matrix
?`:::`
?MASS
devtools::check()
?colMeans
?diag
devtools::check()
devtools::check()
?rnorm
?rgamma
set.seed(123)
n <- 100
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
devtools::document()
set.seed(123)
n <- 100
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
head(my_data[["obs_Y"]])
head(my_data[["true_Y"]])
table(my_data[["obs_Y"]], my_data[["true_Y"]])
set.seed(123)
n <- 500
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
table(my_data[["obs_Y"]], my_data[["true_Y"]])
devtools::document()
set.seed(123)
n <- 100
x_mu <- 0
x_sigma <- 1
z_shape <- 1
beta <- matrix(c(1, 2), ncol = 1)
gamma <- matrix(c(1, 2, 3, 4), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
X <- my_data[["x_design_matrix"]]
Z <- my_data[["z_design_matrix"]]
example_chain1 <- matrix(c(rnorm(n, mean = beta[1,1]),
rnorm(n, mean = beta[2,1]),
rnorm(n, mean = gamma[1,1]),
rnorm(n, mean = gamma[1,2]),
rnorm(n, mean = gamma[2,1]),
rnorm(n, mean = gamma[2,2])),
nrow = n, byrow = FALSE)
colnames(example_chain1) <- c("beta[1,1]", "beta[1,2]",
"gamma[1,1,1]", "gamma[1,2,1]",
"gamma[1,1,2]", "gamma[1,2,2]")
example_chain2 <- matrix(c(rnorm(n, mean = beta[1,1]),
rnorm(n, mean = beta[2,1]),
rnorm(n, mean = gamma[1,1]),
rnorm(n, mean = gamma[1,2]),
rnorm(n, mean = gamma[2,1]),
rnorm(n, mean = gamma[2,2])),
nrow = n, byrow = FALSE)
colnames(example_chain2) <- c("beta[1,1]", "beta[1,2]",
"gamma[1,1,1]", "gamma[1,2,1]",
"gamma[1,1,2]", "gamma[1,2,2]")
chains_list <- list(example_chain1, example_chain2)
pistar_by_chain_matrix <- pistar_by_chain(n_chains = 2,
chains_list = chains_list,
Z = Z, n = n, n_cat = 2)
fixed_chains <- check_and_fix_chains(n_chains = 2, chains_list = chains_list,
pistarjj_matrix = pistar_by_chain_matrix,
dim_x = ncol(X), dim_z = ncol(Z),
n_cat = 2)
pistar_by_chain_matrix
chains_list[[1]][1:5,]
fixed_chains[[1]][1:5,]
chains_list[[2]][1:5,]
fixed_chains[[2]][1:5,]
devtools::check()
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
Ystar = my_data[["obs_Y"]]
x_matrix = matrix(my_data[["x"]], ncol = 1)
z_matrix = matrix(my_data[["z"]], ncol = 1)
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:6], ncol = 2, nrow = 2, byrow = FALSE)
EM_results <- COMBO_EM(Ystar, x_matrix = x_matrix, z_matrix = z_matrix,
beta_start = beta_start, gamma_start = gamma_start)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
obs_Y_matrix = my_data[["obs_Y_matrix"]]
X = my_data[["x_design_matrix"]]
Z = my_data[["z_design_matrix"]]
starting_values <- rnorm(6)
new_parameters <- em_function(starting_values,
obs_Y_matrix = obs_Y_matrix,
X = X, Z = Z,
sample_size = n, n_cat = 2)
new_parameters
set.seed(123)
n <- 100
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
obs_Y_matrix = my_data[["obs_Y_matrix"]]
X = my_data[["x_design_matrix"]]
Z = my_data[["z_design_matrix"]]
starting_values <- rnorm(6)
new_parameters <- em_function(starting_values,
obs_Y_matrix = obs_Y_matrix,
X = X, Z = Z,
sample_size = n, n_cat = 2)
new_parameters
set.seed(123)
n <- 5000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
obs_Y_matrix = my_data[["obs_Y_matrix"]]
X = my_data[["x_design_matrix"]]
Z = my_data[["z_design_matrix"]]
starting_values <- rnorm(6)
new_parameters <- em_function(starting_values,
obs_Y_matrix = obs_Y_matrix,
X = X, Z = Z,
sample_size = n, n_cat = 2)
new_parameters
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
obs_Y = my_data[["obs_Y"]]
X = my_data[["x_design_matrix"]]
Z = my_data[["z_design_matrix"]]
unif_lower_beta <- matrix(c(-5, -5, NA, NA), nrow = 2, byrow = TRUE)
unif_upper_beta <- matrix(c(5, 5, NA, NA), nrow = 2, byrow = TRUE)
unif_lower_gamma <- array(data = c(-5, NA, -5, NA, -5, NA, -5, NA),
dim = c(2,2,2))
unif_upper_gamma <- array(data = c(5, NA, 5, NA, 5, NA, 5, NA),
dim = c(2,2,2))
beta_prior_parameters <- list(lower = unif_lower_beta, upper = unif_upper_beta)
gamma_prior_parameters <- list(lower = unif_lower_gamma, upper = unif_upper_gamma)
modelstring = model_picker(prior = "uniform")
temp_model_file = tempfile()
tmps = file(temp_model_file, "w")
cat(modelstring, file = tmps)
close(tmps)
jags_model_object <- jags_picker(prior = "uniform",
sample_size = n,
dim_x = ncol(X), dim_z = ncol(Z),
n_cat = 2,
Ystar = obs_Y, X = X, Z = Z,
beta_prior_parameters = beta_prior_parameters,
gamma_prior_parameters = gamma_prior_parameters,
number_MCMC_chains = 1,
model_file = temp_model_file)
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
Ystar = ifelse(my_data[["obs_Y"]] == 1, 1, 0)
x_matrix = matrix(my_data[["x"]], ncol = 1)
z_matrix = matrix(my_data[["z"]], ncol = 1)
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:4], ncol = 1, nrow = 2, byrow = FALSE)
perfect_sensitivity_results <- perfect_sensitivity_EM(Ystar,
Z = x_matrix, X = z_matrix,
start = c(beta_start, gamma_start),
beta0_fixed = NULL)
perfect_sensitivity_results$param
c(beta, gamma[,2])
set.seed(123)
n <- 2000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
Ystar = ifelse(my_data[["obs_Y"]] == 1, 1, 0)
x_matrix = matrix(my_data[["x"]], ncol = 1)
z_matrix = matrix(my_data[["z"]], ncol = 1)
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:4], ncol = 1, nrow = 2, byrow = FALSE)
perfect_sensitivity_results <- perfect_sensitivity_EM(Ystar,
Z = x_matrix, X = z_matrix,
start = c(beta_start, gamma_start),
beta0_fixed = NULL)
perfect_sensitivity_results$param
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, 2), ncol = 1)
true_gamma <- matrix(c(1, 2, 3, 4), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
Ystar = ifelse(my_data[["obs_Y"]] == 1, 1, 0)
x_matrix = matrix(my_data[["x"]], ncol = 1)
z_matrix = matrix(my_data[["z"]], ncol = 1)
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:4], ncol = 1, nrow = 2, byrow = FALSE)
perfect_sensitivity_results <- perfect_sensitivity_EM(Ystar,
Z = x_matrix, X = z_matrix,
start = c(beta_start, gamma_start),
beta0_fixed = NULL)
perfect_sensitivity_results$param
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, 2), ncol = 1)
true_gamma <- matrix(c(1, 10, 3, 4), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
Ystar = ifelse(my_data[["obs_Y"]] == 1, 1, 0)
x_matrix = matrix(my_data[["x"]], ncol = 1)
z_matrix = matrix(my_data[["z"]], ncol = 1)
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:4], ncol = 1, nrow = 2, byrow = FALSE)
perfect_sensitivity_results <- perfect_sensitivity_EM(Ystar,
Z = x_matrix, X = z_matrix,
start = c(beta_start, gamma_start),
beta0_fixed = NULL)
perfect_sensitivity_results$param
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -.5), ncol = 1)
true_gamma <- matrix(c(1, 10, .5, 1.2), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
Ystar = ifelse(my_data[["obs_Y"]] == 1, 1, 0)
x_matrix = matrix(my_data[["x"]], ncol = 1)
z_matrix = matrix(my_data[["z"]], ncol = 1)
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:4], ncol = 1, nrow = 2, byrow = FALSE)
perfect_sensitivity_results <- perfect_sensitivity_EM(Ystar,
Z = x_matrix, X = z_matrix,
start = c(beta_start, gamma_start),
beta0_fixed = NULL)
perfect_sensitivity_results$param
table(my_data[["obs_Y"]], my_data[["true_Y"]])
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -.5), ncol = 1)
true_gamma <- matrix(c(1, 10, .5, 1.2), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
Ystar = ifelse(my_data[["obs_Y"]] == 1, 1, 0)
x_matrix = matrix(my_data[["x"]], ncol = 1)
z_matrix = matrix(my_data[["z"]], ncol = 1)
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:4], ncol = 1, nrow = 2, byrow = FALSE)
perfect_sensitivity_results <- perfect_sensitivity_EM(Ystar,
Z = x_matrix, X = z_matrix,
start = c(beta_start, gamma_start),
beta0_fixed = NULL)
perfect_sensitivity_results$param
table(my_data[["obs_Y"]], my_data[["true_Y"]])
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -.5), ncol = 1)
true_gamma <- matrix(c(1, 10, .5, -3), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
Ystar = ifelse(my_data[["obs_Y"]] == 1, 1, 0)
x_matrix = matrix(my_data[["x"]], ncol = 1)
z_matrix = matrix(my_data[["z"]], ncol = 1)
starting_values <- rep(1,6)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma_start <- matrix(starting_values[3:4], ncol = 1, nrow = 2, byrow = FALSE)
table(my_data[["obs_Y"]], my_data[["true_Y"]])
perfect_sensitivity_results <- perfect_sensitivity_EM(Ystar,
Z = x_matrix, X = z_matrix,
start = c(beta_start, gamma_start),
beta0_fixed = NULL)
perfect_sensitivity_results$param
devtools::document()
devtools::check()
set.seed(123)
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
my_data <- COMBO_data(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z_shape = z_shape,
beta = true_beta, gamma = true_gamma)
obs_Y_matrix = my_data[["obs_Y_matrix"]]
X = my_data[["x_design_matrix"]]
Z = my_data[["z_design_matrix"]]
starting_values <- rnorm(6)
new_parameters <- em_function(starting_values,
obs_Y_matrix = obs_Y_matrix,
X = X, Z = Z,
sample_size = n, n_cat = 2)
new_parameters
devtools::check()
devtools::check()
devtools::check()
pkgdown::build_site()
