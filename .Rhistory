number_MCMC_chains = 4
# Specify parameters for the prior distributions.
unif_lower_beta <- matrix(c(-5, -5, NA, NA), nrow = 2, byrow = TRUE)
unif_upper_beta <- matrix(c(5, 5, NA, NA), nrow = 2, byrow = TRUE)
unif_lower_gamma1 <- array(data = c(-5, NA, -5, NA, -5, NA, -5, NA),
dim = c(2,2,2))
unif_upper_gamma1 <- array(data = c(5, NA, 5, NA, 5, NA, 5, NA),
dim = c(2,2,2))
unif_upper_gamma2 <- array(rep(c(5, NA), 8), dim = c(2,2,2,2))
unif_lower_gamma2 <- array(rep(c(-5, NA), 8), dim = c(2,2,2,2))
beta_prior_parameters <- list(lower = unif_lower_beta, upper = unif_upper_beta)
gamma1_prior_parameters <- list(lower = unif_lower_gamma1, upper = unif_upper_gamma1)
gamma2_prior_parameters <- list(lower = unif_lower_gamma2, upper = unif_upper_gamma2)
naive_gamma2_prior_parameters = gamma1_prior_parameters
MCMC_sample = 6
burn_in = 2
##########################################
naive_modelstring = naive_model_picker_2stage(prior)
##########################################
naive_modelstring = COMBO:::naive_model_picker_2stage(prior)
naive_temp_model_file = tempfile()
tmps = file(naive_temp_model_file, "w")
cat(naive_modelstring, file = tmps)
close(tmps)
naive_jags <- COMBO:::naive_jags_picker_2stage(prior, sample_size, dim_x, dim_v, n_cat,
Ystar, Ytilde, X, V,
beta_prior_parameters,
naive_delta_prior_parameters,
number_MCMC_chains,
naive_model_file = naive_temp_model_file,
display_progress = display_progress)
naive_jags <- COMBO:::naive_jags_picker_2stage(prior, sample_size, dim_x, dim_v, n_cat,
Ystar, Ytilde, X, V,
beta_prior_parameters,
naive_delta_prior_parameters,
number_MCMC_chains,
naive_model_file = naive_temp_model_file,
display_progress = TRUE)
sample_size <- n
naive_jags <- COMBO:::naive_jags_picker_2stage(prior, sample_size, dim_x, dim_v, n_cat,
Ystar, Ytilde, X, V,
beta_prior_parameters,
naive_delta_prior_parameters,
number_MCMC_chains,
naive_model_file = naive_temp_model_file,
display_progress = TRUE)
Ystar <- Ystar1
Ytilde <- Ystar2
x <- x_matrix
z <- z1_matrix
v <- z2_matrix
gamma_prior_parameters <- gamma1_prior_parameters
delta_prior_parameters <- gamma2_prior_parameters
naive_delta_prior_parameters <- naive_gamma2_prior_parameters
sample_size = length(Ystar)
n_cat = 2
# FIX THIS! DIMENSIONS DON'T WORK FOR x, z WITH MORE THAN ONE COL
X = cbind(matrix(1, nrow = sample_size, ncol = 1), x)
Z = cbind(matrix(1, nrow = sample_size, ncol = 1), z)
V = cbind(matrix(1, nrow = sample_size, ncol = 1), v)
dim_x = ncol(X)
dim_z = ncol(Z)
dim_v = ncol(V)
naive_jags <- COMBO:::naive_jags_picker_2stage(prior, sample_size, dim_x, dim_v, n_cat,
Ystar, Ytilde, X, V,
beta_prior_parameters,
naive_delta_prior_parameters,
number_MCMC_chains,
naive_model_file = naive_temp_model_file,
display_progress = display_progress)
naive_jags <- COMBO:::naive_jags_picker_2stage(prior, sample_size, dim_x, dim_v, n_cat,
Ystar, Ytilde, X, V,
beta_prior_parameters,
naive_delta_prior_parameters,
number_MCMC_chains,
naive_model_file = naive_temp_model_file,
display_progress = TRUE)
naive_posterior_sample = coda.samples(naive_jags,
c('beta', 'gamma'),
MCMC_sample,
progress.bar = display_progress_bar)
library(rjags)
naive_posterior_sample = coda.samples(naive_jags,
c('beta', 'gamma'),
MCMC_sample,
progress.bar = TRUE)
naive_posterior_sample = coda.samples(naive_jags,
c('beta', 'gamma2'),
MCMC_sample,
progress.bar = TRUE)
naive_posterior_sample = coda.samples(naive_jags,
c('beta', 'gamma2'),
MCMC_sample,
progress.bar = display_progress_bar)
View(naive_jags)
display_progress_bar <- TRUE
naive_posterior_sample = coda.samples(naive_jags,
c('beta', 'gamma2'),
MCMC_sample,
progress.bar = display_progress_bar)
devtools::install_github("kimberlywebb/COMBO")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE, error = FALSE, message = FALSE,
fig.align = "center")
library(ggplot2)
library(kableExtra)
library(COMBO)
library(dplyr)
library(stringr)
# Set seed.
set.seed(123)
# Set sample size, x and z distribution information.
n <- 1000
x_mu <- 0
x_sigma <- 1
z1_shape <- 1
z2_shape <- 1
# Set true parameter values.
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma1 <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_gamma2 <- array(c(1.5, 1, .5, .5, -.5, 0, -1, -1), dim = c(2, 2, 2))
# Generate data.
my_data <- COMBO_data_2stage(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z1_shape = z1_shape, z2_shape = z2_shape,
beta = true_beta, gamma1 = true_gamma1,
gamma2 = true_gamma2)
# Save list elements as vectors.
Ystar1 <- my_data[["obs_Ystar1"]]
Ystar2 <- my_data[["obs_Ystar2"]]
x_matrix <- my_data[["x"]]
z1_matrix <- my_data[["z1"]]
z2_matrix <- my_data[["z2"]]
# Supply starting values for all parameters.
starting_values <- rep(1,14)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma1_start <- matrix(starting_values[3:6], ncol = 2, nrow = 2, byrow = FALSE)
gamma2_start <- array(starting_values[7:14], dim = c(2,2,2))
# Estimate parameters using the EM-Algorithm.
EM_results <- COMBO_EM_2stage(Ystar1, Ystar2,
x_matrix = x_matrix,
z1_matrix = z1_matrix,
z2_matrix = z2_matrix,
beta_start = beta_start,
gamma1_start = gamma1_start,
gamma2_start = gamma2_start)
EM_results
COMBO:::COMBO_MCMC_2stage
# Specify parameters for the prior distributions.
unif_lower_beta <- matrix(c(-5, -5, NA, NA), nrow = 2, byrow = TRUE)
unif_upper_beta <- matrix(c(5, 5, NA, NA), nrow = 2, byrow = TRUE)
unif_lower_gamma1 <- array(data = c(-5, NA, -5, NA, -5, NA, -5, NA),
dim = c(2,2,2))
unif_upper_gamma1 <- array(data = c(5, NA, 5, NA, 5, NA, 5, NA),
dim = c(2,2,2))
unif_upper_gamma2 <- array(rep(c(5, NA), 8), dim = c(2,2,2,2))
unif_lower_gamma2 <- array(rep(c(-5, NA), 8), dim = c(2,2,2,2))
beta_prior_parameters <- list(lower = unif_lower_beta, upper = unif_upper_beta)
gamma1_prior_parameters <- list(lower = unif_lower_gamma1, upper = unif_upper_gamma1)
gamma2_prior_parameters <- list(lower = unif_lower_gamma2, upper = unif_upper_gamma2)
# Estimate parameters using MCMC.
MCMC_results <- COMBO_MCMC_2stage(Ystar1, Ystar2,
x_matrix = x_matrix,
z1_matrix = z1_matrix,
z2_matrix = z2_matrix,
prior = "uniform",
beta_prior_parameters,
gamma1_prior_parameters,
gamma2_prior_parameters,
naive_gamma2_prior_parameters = gamma1_prior_parameters,
number_MCMC_chains = 4,
MCMC_sample = 6, burn_in = 2)
MCMC_results$posterior_means_df
MCMC_results$naive_posterior_means_df
MCMC_SD <- MCMC_results$posterior_sample_df %>%
group_by(parameter) %>%
summarise(SD = sd(sample)) %>%
ungroup()
MCMC_SD <- MCMC_results$posterior_sample_df %>%
group_by(parameter_name) %>%
summarise(SD = sd(sample)) %>%
ungroup()
MCMC_results_df <- data.frame(Parameter = c("beta1", "beta2",
"gamma1_11", "gamma1_12",
"gamma1_21", "gamma1_22",
"gamma2_111", "gamma2_112",
"gamma2_121", "gamma2_122",
"gamma2_211", "gamma2_212",
"gamma2_221", "gamma2_222"),
Estimates = MCMC_results$posterior_means_df$posterior_mean,
SE = MCMC_SD$SD)
results_df <- rbind(EM_results[,-4], MCMC_results_df)
results_df$lower <- results_df$Estimates - results_df$SE
results_df$upper <- results_df$Estimates + results_df$SE
results_df$method <- c(rep("EM", 14),
rep("Naive", 6), rep("MCMC", 14))
results_df$Parameter <- c("beta1", "beta2",
"gamma1_11", "gamma1_21", "gamma1_12", "gamma1_22",
"gamma2_111", "gamma2_211", "gamma2_121", "gamma2_221",
"gamma2_112", "gamma2_212", "gamma2_122", "gamma2_222",
"beta1", "beta2",
"gamma2_111", "gamma2_211", "gamma2_122", "gamma2_222",
"beta1", "beta2",
"gamma1_11", "gamma1_12", "gamma1_21", "gamma1_22",
"gamma2_111", "gamma2_112", "gamma2_121", "gamma2_122",
"gamma2_211", "gamma2_212", "gamma2_221", "gamma2_222")
results_df$place_holder <- 1
results_df$True_Value <- c(c(true_beta), c(true_gamma1), c(true_gamma2),
c(true_beta), c(true_gamma2[,1,1]), c(true_gamma2[,2,2]),
c(true_beta), true_gamma1[1,], true_gamma1[2,],
c(true_gamma2[1,,][1,]), c(true_gamma2[1,,][2,]),
c(true_gamma2[2,,][1,]), c(true_gamma2[2,,][2,]))
ggplot(data = results_df %>%
filter(str_detect(Parameter, "beta") |
str_detect(Parameter, "gamma1"))) +
geom_hline(aes(yintercept = True_Value), linetype = "dashed") +
geom_point(aes(y = Estimates, x = method, color = method), size = 2) +
geom_linerange(aes(ymin = lower, ymax = upper, x = method, color = method)) +
facet_grid(~Parameter, scales = "free") +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ggtitle("Parameter estimates across analysis methods",
subtitle = "Dashed line denotes true parameter value.") +
labs(x = "Parameter", y = "Estimate", color = "Method") +
theme(legend.position = "bottom")
ggplot(data = results_df %>%
filter(str_detect(Parameter, "gamma2"))) +
geom_hline(aes(yintercept = True_Value), linetype = "dashed") +
geom_point(aes(y = Estimates, x = method, color = method), size = 2) +
geom_linerange(aes(ymin = lower, ymax = upper, x = method, color = method)) +
facet_grid(~Parameter, scales = "free") +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ggtitle("Parameter estimates across analysis methods",
subtitle = "Dashed line denotes true parameter value.") +
labs(x = "Parameter", y = "Estimate", color = "Method") +
theme(legend.position = "bottom")
# Create matrix of gamma parameter estimates from the EM algorithm.
EM_gamma <- matrix(EM_results$Estimates[3:6], ncol = 2, byrow = FALSE)
EM_delta <- array(EM_results$Estimates[7:14], dim = c(2,2,2))
# Compute misclassification probabilities.
EM_misclassification_prob <- misclassification_prob(EM_gamma,
matrix(z1_matrix, ncol = 1))
EM_misclassification_prob2 <- misclassification_prob2(EM_delta,
matrix(z2_matrix, ncol = 1))
# Find the average sensitivity and specificity.
EM_sensitivity_df <- EM_misclassification_prob %>%
filter(Y == 1) %>% filter(Ystar1== 1)
# Find the average sensitivity and specificity.
EM_sensitivity_df <- EM_misclassification_prob %>%
filter(Y == 1) %>% filter(Ystar1== 1)
# Find the average sensitivity and specificity.
EM_sensitivity_df <- EM_misclassification_prob %>%
filter(Y == 1) %>% filter(Ystar== 1)
EM_sensitivity <- mean(EM_sensitivity_df$Probability)
EM_specificity_df <- EM_misclassification_prob %>%
filter(Y == 2) %>% filter(Ystar == 2)
EM_specificity <- mean(EM_specificity_df$Probability)
# Create matrix of gamma parameter estimates from the EM algorithm.
EM_gamma <- matrix(EM_results$Estimates[3:6], ncol = 2, byrow = FALSE)
EM_gamma2 <- array(EM_results$Estimates[7:14], dim = c(2,2,2))
# Compute misclassification probabilities.
EM_misclassification_prob <- misclassification_prob(EM_gamma,
matrix(z1_matrix, ncol = 1))
EM_misclassification_prob2 <- misclassification_prob2(EM_gamma2,
matrix(z2_matrix, ncol = 1))
# Create matrix of gamma parameter estimates from MCMC.
MCMC_gamma <- matrix(MCMC_results$posterior_means_df$posterior_mean[3:6],
ncol = 2, byrow = TRUE)
MCMC_delta <- array(MCMC_results$posterior_means_df$posterior_mean[c(7, 11,
9, 13,
8, 12,
10, 14)],
dim = c(2,2,2))
MCMC_gamma2 <- array(MCMC_results$posterior_means_df$posterior_mean[c(7, 11,
9, 13,
8, 12,
10, 14)],
dim = c(2,2,2))
# Compute misclassification probabilities.
MCMC_misclassification_prob <- misclassification_prob(MCMC_gamma,
matrix(z1_matrix, ncol = 1))
MCMC_misclassification_prob2 <- misclassification_prob2(MCMC_delta,
matrix(z2_matrix, ncol = 1))
MCMC_specificity_df <- MCMC_misclassification_prob %>%
filter(Y == 2) %>% filter(Ystar == 2)
MCMC_specificity <- mean(MCMC_specificity_df$Probability)
MCMC_sensitivity2_df <- MCMC_misclassification_prob2 %>%
filter(Y == 1) %>% filter(Ystar1 == 1) %>% filter(Ystar2== 1)
# Use the generated data to compute the actual sensitivity and specificity rate.
data_classification_table <- table(my_data[["obs_Ystar1"]], my_data[["true_Y"]])
data_classification_table2 <- table(my_data[["obs_Ystar2"]],
my_data[["obs_Ystar1"]], my_data[["true_Y"]])
true_sensitivity <- prop.table(data_classification_table, 2)[1,1]
true_specificity <- prop.table(data_classification_table, 2)[2,2]
true_sensitivity_2stage <- data_classification_table2[1,1,1] /
sum(data_classification_table2[,1,1])
true_specificity_2stage <- data_classification_table2[2,2,2] /
sum(data_classification_table2[,2,2])
misclass_results <- data.frame(Data = c(true_sensitivity, true_specificity),
EM = c(EM_sensitivity, EM_specificity),
MCMC = c(MCMC_sensitivity, MCMC_specificity)) %>%
round(3)
detach("package:COMBO", unload = TRUE)
library(COMBO)
devtools::install_github("kimberlywebb/COMBO")
detach("package:COMBO", unload = TRUE)
devtools::install_github("kimberlywebb/COMBO")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE, error = FALSE, message = FALSE,
fig.align = "center")
library(ggplot2)
library(kableExtra)
library(COMBO)
library(dplyr)
library(stringr)
# Set seed.
set.seed(123)
# Set sample size, x and z distribution information.
n <- 1000
x_mu <- 0
x_sigma <- 1
z1_shape <- 1
z2_shape <- 1
# Set true parameter values.
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma1 <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_gamma2 <- array(c(1.5, 1, .5, .5, -.5, 0, -1, -1), dim = c(2, 2, 2))
# Generate data.
my_data <- COMBO_data_2stage(sample_size = n,
x_mu = x_mu, x_sigma = x_sigma,
z1_shape = z1_shape, z2_shape = z2_shape,
beta = true_beta, gamma1 = true_gamma1,
gamma2 = true_gamma2)
# Save list elements as vectors.
Ystar1 <- my_data[["obs_Ystar1"]]
Ystar2 <- my_data[["obs_Ystar2"]]
x_matrix <- my_data[["x"]]
z1_matrix <- my_data[["z1"]]
z2_matrix <- my_data[["z2"]]
# Supply starting values for all parameters.
starting_values <- rep(1,14)
beta_start <- matrix(starting_values[1:2], ncol = 1)
gamma1_start <- matrix(starting_values[3:6], ncol = 2, nrow = 2, byrow = FALSE)
gamma2_start <- array(starting_values[7:14], dim = c(2,2,2))
# Estimate parameters using the EM-Algorithm.
EM_results <- COMBO_EM_2stage(Ystar1, Ystar2,
x_matrix = x_matrix,
z1_matrix = z1_matrix,
z2_matrix = z2_matrix,
beta_start = beta_start,
gamma1_start = gamma1_start,
gamma2_start = gamma2_start)
EM_results
# Specify parameters for the prior distributions.
unif_lower_beta <- matrix(c(-5, -5, NA, NA), nrow = 2, byrow = TRUE)
unif_upper_beta <- matrix(c(5, 5, NA, NA), nrow = 2, byrow = TRUE)
unif_lower_gamma1 <- array(data = c(-5, NA, -5, NA, -5, NA, -5, NA),
dim = c(2,2,2))
unif_upper_gamma1 <- array(data = c(5, NA, 5, NA, 5, NA, 5, NA),
dim = c(2,2,2))
unif_upper_gamma2 <- array(rep(c(5, NA), 8), dim = c(2,2,2,2))
unif_lower_gamma2 <- array(rep(c(-5, NA), 8), dim = c(2,2,2,2))
beta_prior_parameters <- list(lower = unif_lower_beta, upper = unif_upper_beta)
gamma1_prior_parameters <- list(lower = unif_lower_gamma1, upper = unif_upper_gamma1)
gamma2_prior_parameters <- list(lower = unif_lower_gamma2, upper = unif_upper_gamma2)
# Estimate parameters using MCMC.
MCMC_results <- COMBO_MCMC_2stage(Ystar1, Ystar2,
x_matrix = x_matrix,
z1_matrix = z1_matrix,
z2_matrix = z2_matrix,
prior = "uniform",
beta_prior_parameters,
gamma1_prior_parameters,
gamma2_prior_parameters,
naive_gamma2_prior_parameters = gamma1_prior_parameters,
number_MCMC_chains = 4,
MCMC_sample = 2000, burn_in = 1000)
MCMC_results$posterior_means_df
MCMC_results$naive_posterior_means_df
MCMC_SD <- MCMC_results$posterior_sample_df %>%
group_by(parameter_name) %>%
summarise(SD = sd(sample)) %>%
ungroup()
MCMC_results_df <- data.frame(Parameter = c("beta1", "beta2",
"gamma1_11", "gamma1_12",
"gamma1_21", "gamma1_22",
"gamma2_111", "gamma2_112",
"gamma2_121", "gamma2_122",
"gamma2_211", "gamma2_212",
"gamma2_221", "gamma2_222"),
Estimates = MCMC_results$posterior_means_df$posterior_mean,
SE = MCMC_SD$SD)
results_df <- rbind(EM_results[,-4], MCMC_results_df)
results_df$lower <- results_df$Estimates - results_df$SE
results_df$upper <- results_df$Estimates + results_df$SE
results_df$method <- c(rep("EM", 14),
rep("Naive", 6), rep("MCMC", 14))
results_df$Parameter <- c("beta1", "beta2",
"gamma1_11", "gamma1_21", "gamma1_12", "gamma1_22",
"gamma2_111", "gamma2_211", "gamma2_121", "gamma2_221",
"gamma2_112", "gamma2_212", "gamma2_122", "gamma2_222",
"beta1", "beta2",
"gamma2_111", "gamma2_211", "gamma2_122", "gamma2_222",
"beta1", "beta2",
"gamma1_11", "gamma1_12", "gamma1_21", "gamma1_22",
"gamma2_111", "gamma2_112", "gamma2_121", "gamma2_122",
"gamma2_211", "gamma2_212", "gamma2_221", "gamma2_222")
results_df$place_holder <- 1
results_df$True_Value <- c(c(true_beta), c(true_gamma1), c(true_gamma2),
c(true_beta), c(true_gamma2[,1,1]), c(true_gamma2[,2,2]),
c(true_beta), true_gamma1[1,], true_gamma1[2,],
c(true_gamma2[1,,][1,]), c(true_gamma2[1,,][2,]),
c(true_gamma2[2,,][1,]), c(true_gamma2[2,,][2,]))
ggplot(data = results_df %>%
filter(str_detect(Parameter, "beta") |
str_detect(Parameter, "gamma1"))) +
geom_hline(aes(yintercept = True_Value), linetype = "dashed") +
geom_point(aes(y = Estimates, x = method, color = method), size = 2) +
geom_linerange(aes(ymin = lower, ymax = upper, x = method, color = method)) +
facet_grid(~Parameter, scales = "free") +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ggtitle("Parameter estimates across analysis methods",
subtitle = "Dashed line denotes true parameter value.") +
labs(x = "Parameter", y = "Estimate", color = "Method") +
theme(legend.position = "bottom")
ggplot(data = results_df %>%
filter(str_detect(Parameter, "gamma2"))) +
geom_hline(aes(yintercept = True_Value), linetype = "dashed") +
geom_point(aes(y = Estimates, x = method, color = method), size = 2) +
geom_linerange(aes(ymin = lower, ymax = upper, x = method, color = method)) +
facet_grid(~Parameter, scales = "free") +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ggtitle("Parameter estimates across analysis methods",
subtitle = "Dashed line denotes true parameter value.") +
labs(x = "Parameter", y = "Estimate", color = "Method") +
theme(legend.position = "bottom")
# Create matrix of gamma parameter estimates from the EM algorithm.
EM_gamma <- matrix(EM_results$Estimates[3:6], ncol = 2, byrow = FALSE)
EM_gamma2 <- array(EM_results$Estimates[7:14], dim = c(2,2,2))
# Compute misclassification probabilities.
EM_misclassification_prob <- misclassification_prob(EM_gamma,
matrix(z1_matrix, ncol = 1))
EM_misclassification_prob2 <- misclassification_prob2(EM_gamma2,
matrix(z2_matrix, ncol = 1))
# Find the average sensitivity and specificity.
EM_sensitivity_df <- EM_misclassification_prob %>%
filter(Y == 1) %>% filter(Ystar== 1)
EM_sensitivity <- mean(EM_sensitivity_df$Probability)
EM_specificity_df <- EM_misclassification_prob %>%
filter(Y == 2) %>% filter(Ystar == 2)
EM_specificity <- mean(EM_specificity_df$Probability)
EM_sensitivity2_df <- EM_misclassification_prob2 %>%
filter(Y == 1) %>% filter(Ystar1 == 1) %>% filter(Ystar2 == 1)
EM_sensitivity2 <- mean(EM_sensitivity2_df$Probability)
EM_specificity2_df <- EM_misclassification_prob2 %>%
filter(Y == 2) %>% filter(Ystar1 == 2) %>% filter(Ystar2 == 2)
EM_specificity2 <- mean(EM_specificity2_df$Probability)
# Create matrix of gamma parameter estimates from MCMC.
MCMC_gamma <- matrix(MCMC_results$posterior_means_df$posterior_mean[3:6],
ncol = 2, byrow = TRUE)
MCMC_gamma2 <- array(MCMC_results$posterior_means_df$posterior_mean[c(7, 11,
9, 13,
8, 12,
10, 14)],
dim = c(2,2,2))
# Compute misclassification probabilities.
MCMC_misclassification_prob <- misclassification_prob(MCMC_gamma,
matrix(z1_matrix, ncol = 1))
MCMC_misclassification_prob2 <- misclassification_prob2(MCMC_delta,
matrix(z2_matrix, ncol = 1))
# Find the average sensitivity and specificity
MCMC_sensitivity_df <- MCMC_misclassification_prob %>%
filter(Y == 1) %>% filter(Ystar == 1)
MCMC_sensitivity <- mean(MCMC_sensitivity_df$Probability)
MCMC_specificity_df <- MCMC_misclassification_prob %>%
filter(Y == 2) %>% filter(Ystar == 2)
MCMC_specificity <- mean(MCMC_specificity_df$Probability)
MCMC_sensitivity2_df <- MCMC_misclassification_prob2 %>%
filter(Y == 1) %>% filter(Ystar1 == 1) %>% filter(Ystar2== 1)
MCMC_sensitivity2 <- mean(MCMC_sensitivity2_df$Probability)
MCMC_specificity2_df <- MCMC_misclassification_prob2 %>%
filter(Y == 2) %>% filter(Ystar1 == 2) %>% filter(Ystar2 == 2)
MCMC_specificity2 <- mean(MCMC_specificity2_df$Probability)
# Use the generated data to compute the actual sensitivity and specificity rate.
data_classification_table <- table(my_data[["obs_Ystar1"]], my_data[["true_Y"]])
data_classification_table2 <- table(my_data[["obs_Ystar2"]],
my_data[["obs_Ystar1"]], my_data[["true_Y"]])
true_sensitivity <- prop.table(data_classification_table, 2)[1,1]
true_specificity <- prop.table(data_classification_table, 2)[2,2]
true_sensitivity_2stage <- data_classification_table2[1,1,1] /
sum(data_classification_table2[,1,1])
true_specificity_2stage <- data_classification_table2[2,2,2] /
sum(data_classification_table2[,2,2])
misclass_results <- data.frame(Data = c(true_sensitivity, true_specificity),
EM = c(EM_sensitivity, EM_specificity),
MCMC = c(MCMC_sensitivity, MCMC_specificity)) %>%
round(3)
misclass_results2 <- data.frame(Data = c(true_sensitivity_2stage, true_specificity_2stage),
EM = c(EM_sensitivity2, EM_specificity2),
MCMC = c(MCMC_sensitivity2, MCMC_specificity2)) %>%
round(3)
kbl(t(misclass_results), col.names = c("Sensitivity, P(Y*(1) = 1 | Y = 1)",
"Specificity, P(Y*(1) = 2 | Y = 2)"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
kbl(t(misclass_results2), col.names = c("P(Y*(2) = 1 |Y*(1) = 1,  Y = 1)",
"P(Y*(2) = 2 | Y*(1) = 2, Y = 2)"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
